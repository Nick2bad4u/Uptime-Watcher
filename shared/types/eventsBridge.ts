// THIS FILE IS AUTO-GENERATED BY scripts/generate-ipc-artifacts.mts. DO NOT EDIT.

/**
 * Shared type definition for the preload events bridge.
 *
 * @remarks
 * Ensures the Electron preload layer and renderer agree on the shape of the
 * event subscription API exposed through `window.electronAPI.events`.
 */
import type { RendererEventPayloadMap } from '@shared/ipc/rendererEvents';

type CacheInvalidatedPayload = RendererEventPayloadMap['cache:invalidated'];
type MonitorDownPayload = RendererEventPayloadMap['monitor:down'];
type MonitorStatusChangedPayload = RendererEventPayloadMap['monitor:status-changed'];
type MonitorUpPayload = RendererEventPayloadMap['monitor:up'];
type MonitorCheckCompletedPayload = RendererEventPayloadMap['monitor:check-completed'];
type MonitoringStartedPayload = RendererEventPayloadMap['monitoring:started'];
type MonitoringStoppedPayload = RendererEventPayloadMap['monitoring:stopped'];
type SiteAddedPayload = RendererEventPayloadMap['site:added'];
type SiteRemovedPayload = RendererEventPayloadMap['site:removed'];
type SiteUpdatedPayload = RendererEventPayloadMap['site:updated'];
type HistoryLimitUpdatedPayload = RendererEventPayloadMap['settings:history-limit-updated'];
type StateSyncEventPayload = RendererEventPayloadMap['state-sync-event'];
type TestEventPayload = RendererEventPayloadMap['test-event'];
type UpdateStatusPayload = RendererEventPayloadMap['update-status'];

/**
 * Contract for the preload events bridge exposed to the renderer.
 *
 * @public
 */
export interface EventsDomainBridge {
    /**
     * Payload for cache invalidation notifications.
     * @param callback - Invoked with payloads emitted on the `cache:invalidated` channel.
     * @returns Cleanup function that removes the registered listener.
     */
    readonly onCacheInvalidated: (
        callback: (data: CacheInvalidatedPayload) => void
    ) => () => void;

    /**
     * Payload for monitor down events.
     * @param callback - Invoked with payloads emitted on the `monitor:down` channel.
     * @returns Cleanup function that removes the registered listener.
     */
    readonly onMonitorDown: (
        callback: (data: MonitorDownPayload) => void
    ) => () => void;

    /**
     * Payload for monitor status change events.
     * @param callback - Invoked with payloads emitted on the `monitor:status-changed` channel.
     * @returns Cleanup function that removes the registered listener.
     */
    readonly onMonitorStatusChanged: (
        callback: (data: MonitorStatusChangedPayload) => void
    ) => () => void;

    /**
     * Payload for monitor up events.
     * @param callback - Invoked with payloads emitted on the `monitor:up` channel.
     * @returns Cleanup function that removes the registered listener.
     */
    readonly onMonitorUp: (
        callback: (data: MonitorUpPayload) => void
    ) => () => void;

    /**
     * Payload for monitor check completion events.
     * @param callback - Invoked with payloads emitted on the `monitor:check-completed` channel.
     * @returns Cleanup function that removes the registered listener.
     */
    readonly onMonitorCheckCompleted: (
        callback: (data: MonitorCheckCompletedPayload) => void
    ) => () => void;

    /**
     * Payload for monitoring started events.
     * @param callback - Invoked with payloads emitted on the `monitoring:started` channel.
     * @returns Cleanup function that removes the registered listener.
     */
    readonly onMonitoringStarted: (
        callback: (data: MonitoringStartedPayload) => void
    ) => () => void;

    /**
     * Payload for monitoring stopped events.
     * @param callback - Invoked with payloads emitted on the `monitoring:stopped` channel.
     * @returns Cleanup function that removes the registered listener.
     */
    readonly onMonitoringStopped: (
        callback: (data: MonitoringStoppedPayload) => void
    ) => () => void;

    /**
     * Payload for site added events.
     * @param callback - Invoked with payloads emitted on the `site:added` channel.
     * @returns Cleanup function that removes the registered listener.
     */
    readonly onSiteAdded: (
        callback: (data: SiteAddedPayload) => void
    ) => () => void;

    /**
     * Payload for site removed events.
     * @param callback - Invoked with payloads emitted on the `site:removed` channel.
     * @returns Cleanup function that removes the registered listener.
     */
    readonly onSiteRemoved: (
        callback: (data: SiteRemovedPayload) => void
    ) => () => void;

    /**
     * Payload for site updated events.
     * @param callback - Invoked with payloads emitted on the `site:updated` channel.
     * @returns Cleanup function that removes the registered listener.
     */
    readonly onSiteUpdated: (
        callback: (data: SiteUpdatedPayload) => void
    ) => () => void;

    /**
     * Payload for database history retention updates.
     * @param callback - Invoked with payloads emitted on the `settings:history-limit-updated` channel.
     * @returns Cleanup function that removes the registered listener.
     */
    readonly onHistoryLimitUpdated: (
        callback: (data: HistoryLimitUpdatedPayload) => void
    ) => () => void;

    /**
     * Payload for full state synchronisation broadcasts.
     * @param callback - Invoked with payloads emitted on the `state-sync-event` channel.
     * @returns Cleanup function that removes the registered listener.
     */
    readonly onStateSyncEvent: (
        callback: (data: StateSyncEventPayload) => void
    ) => () => void;

    /**
     * Payload for development/test events.
     * @param callback - Invoked with payloads emitted on the `test-event` channel.
     * @returns Cleanup function that removes the registered listener.
     */
    readonly onTestEvent: (
        callback: (data: TestEventPayload) => void
    ) => () => void;

    /**
     * Payload for auto-updater status notifications.
     * @param callback - Invoked with payloads emitted on the `update-status` channel.
     * @returns Cleanup function that removes the registered listener.
     */
    readonly onUpdateStatus: (
        callback: (data: UpdateStatusPayload) => void
    ) => () => void;

    /**
     * Remove all registered renderer event listeners.
     */
    readonly removeAllListeners: () => void;
}
