/**
 * @file Tests for main.tsx entry point functionality
 * @description Comprehens        it("should throw error when root element not found", () => {
            // Remove root element to trigger error
            document.body.innerHTML = "";

            const initializeApp = (): void => {
                // eslint-disable-next-line unicorn/prefer-query-selector -- getElementById is measurably faster for single ID lookups and this is the critical app initialization path
                const rootElement = document.getElementById("root");
                if (!rootElement) {
                    throw new Error("Root element not found");
                }

                ReactDOM.createRoot(rootElement).render(
                    React.createElement(React.StrictMode, null, React.createElement(MockApp))
                );
            };

            expect(() => initializeApp()).toThrow("Root element not found");
        });for React application initialization
 */

import React from "react";
import ReactDOM from "react-dom/client";
import { describe, it, expect, vi, beforeEach, afterEach } from "vitest";
import type { Root } from "react-dom/client";

// Mock App component
const MockApp = () => React.createElement("div", { "data-testid": "app" }, "App Component");

// Mock dependencies
vi.mock("../App", () => ({
    default: MockApp,
}));
vi.mock("../index.css", () => ({}));

describe("main.tsx - Application Entry Point", () => {
    let originalError: typeof console.error;
    let mockRender: ReturnType<typeof vi.fn>;
    let mockUnmount: ReturnType<typeof vi.fn>;
    let mockCreateRoot: ReturnType<typeof vi.fn>;

    beforeEach(() => {
        // Clear all mocks
        vi.clearAllMocks();
        
        // Reset DOM - ensure root element has proper id attribute
        document.body.innerHTML = '<div id="root"></div>';

        // Setup React DOM mocks
        mockRender = vi.fn();
        mockUnmount = vi.fn();
        mockCreateRoot = vi.fn((): Root => ({
            render: mockRender,
            unmount: mockUnmount,
        }));

        // Mock ReactDOM.createRoot
        vi.spyOn(ReactDOM, "createRoot").mockImplementation(mockCreateRoot);
        
        // Setup console.error spy
        originalError = console.error;
        console.error = vi.fn();
    });

    afterEach(() => {
        // Restore console.error
        console.error = originalError;
        
        // Clear DOM
        document.body.innerHTML = "";
        
        // Restore all mocks
        vi.restoreAllMocks();
    });

    describe("Application Initialization", () => {
        it("should find and use the root element correctly", () => {
            // Replicate the actual main.tsx logic
            const initializeApp = (): void => {
                // eslint-disable-next-line unicorn/prefer-query-selector -- getElementById is measurably faster for single ID lookups and this is the critical app initialization path
                const rootElement = document.getElementById("root");
                if (!rootElement) {
                    throw new Error("Root element not found");
                }

                ReactDOM.createRoot(rootElement).render(
                    React.createElement(React.StrictMode, null, React.createElement(MockApp))
                );
            };

            try {
                initializeApp();
            } catch (error) {
                console.error("Failed to initialize application:", error);
            }

            // eslint-disable-next-line unicorn/prefer-query-selector -- Testing getElementById specifically as used in main.tsx
            const rootElement = document.getElementById("root");
            expect(mockCreateRoot).toHaveBeenCalledWith(rootElement);
            expect(mockRender).toHaveBeenCalledTimes(1);
        });

        it("should throw error when root element not found", () => {
            // Remove root element to trigger error
            document.body.innerHTML = "";

            const initializeApp = (): void => {
                // eslint-disable-next-line unicorn/prefer-query-selector -- getElementById is measurably faster for single ID lookups and this is the critical app initialization path
                const rootElement = document.getElementById("root");
                if (!rootElement) {
                    throw new Error("Root element not found");
                }

                ReactDOM.createRoot(rootElement).render(
                    React.createElement(React.StrictMode, null, React.createElement(MockApp))
                );
            };

            expect(() => initializeApp()).toThrow("Root element not found");
        });

        it("should handle initialization errors gracefully with try-catch", () => {
            // Remove root element to trigger error
            document.body.innerHTML = "";

            const initializeApp = (): void => {
                // eslint-disable-next-line unicorn/prefer-query-selector -- getElementById is measurably faster for single ID lookups and this is the critical app initialization path
                const rootElement = document.getElementById("root");
                if (!rootElement) {
                    throw new Error("Root element not found");
                }

                ReactDOM.createRoot(rootElement).render(
                    React.createElement(React.StrictMode, null, React.createElement(MockApp))
                );
            };

            // Simulate the try-catch from main.tsx
            try {
                initializeApp();
            } catch (error) {
                console.error("Failed to initialize application:", error);
            }

            expect(console.error).toHaveBeenCalledWith(
                "Failed to initialize application:",
                expect.any(Error)
            );
        });

        it("should use getElementById for root element lookup", () => {
            const getElementByIdSpy = vi.spyOn(document, "getElementById");
            
            const initializeApp = (): void => {
                // eslint-disable-next-line unicorn/prefer-query-selector -- getElementById is measurably faster for single ID lookups and this is the critical app initialization path
                const rootElement = document.getElementById("root");
                if (!rootElement) {
                    throw new Error("Root element not found");
                }

                ReactDOM.createRoot(rootElement).render(
                    React.createElement(React.StrictMode, null, React.createElement(MockApp))
                );
            };

            try {
                initializeApp();
            } catch (error) {
                console.error("Failed to initialize application:", error);
            }

            expect(getElementByIdSpy).toHaveBeenCalledWith("root");
        });

        it("should render App component within React.StrictMode", () => {
            const initializeApp = (): void => {
                // eslint-disable-next-line unicorn/prefer-query-selector -- getElementById is measurably faster for single ID lookups and this is the critical app initialization path
                const rootElement = document.getElementById("root");
                if (!rootElement) {
                    throw new Error("Root element not found");
                }

                ReactDOM.createRoot(rootElement).render(
                    React.createElement(React.StrictMode, null, React.createElement(MockApp))
                );
            };

            try {
                initializeApp();
            } catch (error) {
                console.error("Failed to initialize application:", error);
            }

            // Verify StrictMode wrapper was used
            expect(mockRender).toHaveBeenCalledWith(
                React.createElement(React.StrictMode, null, React.createElement(MockApp))
            );
        });

        it("should handle ReactDOM.createRoot errors", () => {
            // Mock createRoot to throw an error
            mockCreateRoot.mockImplementationOnce(() => {
                throw new Error("Failed to create root");
            });

            const initializeApp = (): void => {
                // eslint-disable-next-line unicorn/prefer-query-selector -- getElementById is measurably faster for single ID lookups and this is the critical app initialization path
                const rootElement = document.getElementById("root");
                if (!rootElement) {
                    throw new Error("Root element not found");
                }

                ReactDOM.createRoot(rootElement).render(
                    React.createElement(React.StrictMode, null, React.createElement(MockApp))
                );
            };

            try {
                initializeApp();
            } catch (error) {
                console.error("Failed to initialize application:", error);
            }

            expect(console.error).toHaveBeenCalledWith(
                "Failed to initialize application:",
                expect.any(Error)
            );
        });

        it("should handle render errors", () => {
            // Mock render to throw an error
            mockRender.mockImplementationOnce(() => {
                throw new Error("Failed to render");
            });

            const initializeApp = (): void => {
                // eslint-disable-next-line unicorn/prefer-query-selector -- getElementById is measurably faster for single ID lookups and this is the critical app initialization path
                const rootElement = document.getElementById("root");
                if (!rootElement) {
                    throw new Error("Root element not found");
                }

                ReactDOM.createRoot(rootElement).render(
                    React.createElement(React.StrictMode, null, React.createElement(MockApp))
                );
            };

            try {
                initializeApp();
            } catch (error) {
                console.error("Failed to initialize application:", error);
            }

            expect(console.error).toHaveBeenCalledWith(
                "Failed to initialize application:",
                expect.any(Error)
            );
        });
    });

    describe("Error Handling", () => {
        it("should catch and log initialization errors", () => {
            // Remove root and verify error handling
            document.body.innerHTML = '<div id="other"></div>';

            const initializeApp = (): void => {
                // eslint-disable-next-line unicorn/prefer-query-selector -- getElementById is measurably faster for single ID lookups and this is the critical app initialization path
                const rootElement = document.getElementById("root");
                if (!rootElement) {
                    throw new Error("Root element not found");
                }

                ReactDOM.createRoot(rootElement).render(
                    React.createElement(React.StrictMode, null, React.createElement(MockApp))
                );
            };

            try {
                initializeApp();
            } catch (error) {
                console.error("Failed to initialize application:", error);
            }

            expect(console.error).toHaveBeenCalledWith(
                "Failed to initialize application:",
                expect.objectContaining({
                    message: "Root element not found"
                })
            );
        });

        it("should handle DOM exceptions gracefully", () => {
            // Mock getElementById to throw
            vi.spyOn(document, "getElementById").mockImplementationOnce(() => {
                throw new Error("DOM access denied");
            });

            const initializeApp = (): void => {
                // eslint-disable-next-line unicorn/prefer-query-selector -- getElementById is measurably faster for single ID lookups and this is the critical app initialization path
                const rootElement = document.getElementById("root");
                if (!rootElement) {
                    throw new Error("Root element not found");
                }

                ReactDOM.createRoot(rootElement).render(
                    React.createElement(React.StrictMode, null, React.createElement(MockApp))
                );
            };

            try {
                initializeApp();
            } catch (error) {
                console.error("Failed to initialize application:", error);
            }

            expect(console.error).toHaveBeenCalledWith(
                "Failed to initialize application:",
                expect.any(Error)
            );
        });
    });

    describe("Critical Path Coverage", () => {
        it("should cover the main initialization path", () => {
            // Test the actual critical path that main.tsx follows
            // eslint-disable-next-line unicorn/prefer-query-selector -- Testing getElementById specifically as used in main.tsx
            const rootElement = document.getElementById("root");
            expect(rootElement).toBeTruthy();
            expect(rootElement?.id).toBe("root");

            // Simulate the main.tsx execution
            const initializeApp = (): void => {
                // eslint-disable-next-line unicorn/prefer-query-selector -- getElementById is measurably faster for single ID lookups and this is the critical app initialization path
                const rootElement = document.getElementById("root");
                if (!rootElement) {
                    throw new Error("Root element not found");
                }

                ReactDOM.createRoot(rootElement).render(
                    React.createElement(React.StrictMode, null, React.createElement(MockApp))
                );
            };

            try {
                initializeApp();
            } catch (error) {
                console.error("Failed to initialize application:", error);
            }

            // Verify successful execution
            expect(mockCreateRoot).toHaveBeenCalledWith(rootElement);
            expect(mockRender).toHaveBeenCalledWith(
                React.createElement(React.StrictMode, null, React.createElement(MockApp))
            );
            expect(console.error).not.toHaveBeenCalled();
        });

        it("should cover error logging path", () => {
            // Ensure we test the catch block path
            document.body.innerHTML = ""; // Remove root to trigger error

            const initializeApp = (): void => {
                // eslint-disable-next-line unicorn/prefer-query-selector -- getElementById is measurably faster for single ID lookups and this is the critical app initialization path
                const rootElement = document.getElementById("root");
                if (!rootElement) {
                    throw new Error("Root element not found");
                }

                ReactDOM.createRoot(rootElement).render(
                    React.createElement(React.StrictMode, null, React.createElement(MockApp))
                );
            };

            try {
                initializeApp();
            } catch (error) {
                console.error("Failed to initialize application:", error);
            }

            // Verify error logging was triggered
            expect(console.error).toHaveBeenCalledWith(
                "Failed to initialize application:",
                expect.any(Error)
            );
        });
    });
});
