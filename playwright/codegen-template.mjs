/**
 * Custom Playwright codegen template for better lint compliance
 *
 * This template automatically formats generated tests to match our lint
 * standards:
 *
 * - Proper describe blocks
 * - Semantic locators preferred
 * - Clean test titles
 * - TypeScript best practices
 * - No conditional logic in tests
 * - No raw locators
 */

// Template for generated test files
/**
 * Template string for generating Playwright test files with lint-compliant structure.
 *
 * @param {string} testName - The name of the test suite.
 * @param {string} testTitle - The title of the individual test.
 * @param {string} testBody - The body of the test containing Playwright actions and assertions.
 * @usage
 * Replace {{testName}}, {{testTitle}}, and {{testBody}} with appropriate values when generating a test file.
 */
const testTemplate = `/**
 * Generated UI test for {{testName}}
 *
 * @remarks Auto-generated by Playwright codegen with custom template
 * @file Generated Playwright test
 */

/**
 * Imports Playwright's test runner and assertion utilities for use in generated test files.
 *
 * @remarks
 * This import provides the core testing API `(`test`, `expect`)` required for Playwright test execution.
 * All generated tests rely on these functions for structure and assertions.
 */
import { test, expect } from "@playwright/test";

test.describe("{{testName}}", () => {
    test("{{testTitle}}", async ({ page }) => {
        {{testBody}}
    });
});
`;

// Comprehensive locator transformations for better semantic usage
/**
 * Maps raw Playwright locator strings to their semantic alternatives for
 * improved readability, maintainability, and lint compliance in generated test
 * code.
 *
 * @remarks
 * This object is used by the codegen template to automatically replace
 * non-semantic or brittle locators (e.g., CSS selectors, data-testid, roles)
 * with preferred semantic queries such as getByRole or getByTestId.
 *
 * @example // Converts: locator("button") => getByRole("button") // Converts:
 * locator("[data-testid='submit']") => getByTestId("submit")
 */
const locatorTransforms = {
    // Basic element transformations (alphabetized)
    'locator("a")': 'getByRole("link")',
    'locator("article")': 'getByRole("article")',
    'locator("aside")': 'getByRole("complementary")',
    'locator("button")': 'getByRole("button")',
    'locator("dialog")': 'getByRole("dialog")',
    'locator("footer")': 'getByRole("contentinfo")',
    'locator("h1")': 'getByRole("heading", { level: 1 })',
    'locator("h2")': 'getByRole("heading", { level: 2 })',
    'locator("h3")': 'getByRole("heading", { level: 3 })',
    'locator("h4")': 'getByRole("heading", { level: 4 })',
    'locator("h5")': 'getByRole("heading", { level: 5 })',
    'locator("h6")': 'getByRole("heading", { level: 6 })',
    'locator("header")': 'getByRole("banner")',
    'locator("input[type=email]")': 'getByRole("textbox", { name: /email/i })',
    'locator("input[type=password]")': 'getByRole("textbox", { name: /password/i })',
    'locator("input[type=search]")': 'getByRole("searchbox")',
    'locator("input[type=text]")': 'getByRole("textbox")',
    'locator("input[type=url]")': 'getByRole("textbox", { name: /url/i })',
    'locator("main")': 'getByRole("main")',
    'locator("nav")': 'getByRole("navigation")',
    'locator("section")': 'getByRole("region")',
    'locator("select")': 'getByRole("combobox")',
    'locator("textarea")': 'getByRole("textbox")',

    // Role-based transformations (alphabetized)
    'locator("[role=alert]")': 'getByRole("alert")',
    'locator("[role=banner]")': 'getByRole("banner")',
    'locator("[role=button]")': 'getByRole("button")',
    'locator("[role=checkbox]")': 'getByRole("checkbox")',
    'locator("[role=complementary]")': 'getByRole("complementary")',
    'locator("[role=contentinfo]")': 'getByRole("contentinfo")',
    'locator("[role=dialog]")': 'getByRole("dialog")',
    'locator("[role=link]")': 'getByRole("link")',
    'locator("[role=listbox]")': 'getByRole("listbox")',
    'locator("[role=main]")': 'getByRole("main")',
    'locator("[role=menu]")': 'getByRole("menu")',
    'locator("[role=menuitem]")': 'getByRole("menuitem")',
    'locator("[role=navigation]")': 'getByRole("navigation")',
    'locator("[role=option]")': 'getByRole("option")',
    'locator("[role=progressbar]")': 'getByRole("progressbar")',
    'locator("[role=radio]")': 'getByRole("radio")',
    'locator("[role=search]")': 'getByRole("search")',
    'locator("[role=slider]")': 'getByRole("slider")',
    'locator("[role=spinbutton]")': 'getByRole("spinbutton")',
    'locator("[role=tab]")': 'getByRole("tab")',
    'locator("[role=tablist]")': 'getByRole("tablist")',
    'locator("[role=tabpanel]")': 'getByRole("tabpanel")',
    'locator("[role=status]")': 'getByRole("status")',
    'locator("[role=textbox]")': 'getByRole("textbox")',

    // Test ID transformations (alphabetized)
    "locator(\"[data-testid='": 'getByTestId("',
    'locator("[data-testid="': 'getByTestId("',

    // Common class-based selectors to semantic alternatives (alphabetized)
    'locator(".btn")': 'getByRole("button")',
    'locator(".button")': 'getByRole("button")',
    'locator(".form-control")': 'getByRole("textbox")',
    'locator(".input")': 'getByRole("textbox")',
    'locator(".link")': 'getByRole("link")',

    // Body/html replacements (often problematic)
    // Retained for legacy compatibility; prefer semantic locators (e.g., getByRole, getByTestId) for maintainability.
    // TODO: Replace with semantic locator where possible.
    'locator("body")': 'locator("body")',
    'locator("html")': 'locator("html")',
};

/**
 * Maps raw Playwright test titles to improved, lint-compliant versions.
 *
 * @remarks
 * This object is used to automatically transform generated test titles into
 * more descriptive and standardized forms, improving readability and
 * consistency in test code.
 *
 * @example // Converts: test("Test login") => test("should test login") //
 * Converts: test("Verify user creation") => test("should verify user
 * creation")
 */
const titleTransforms = {
    // Ensures test titles start with "should check" for checking actions
    'test("Check': 'test("should check',

    // Ensures test titles start with "should click" for click actions
    'test("Click': 'test("should click',

    // Ensures test titles start with "should download" for download actions
    'test("Download': 'test("should download',

    // Ensures test titles start with "should enter" for input actions
    'test("Enter': 'test("should enter',

    // Ensures test titles start with "should navigate" for navigation actions
    'test("Navigate': 'test("should navigate',

    // Ensures test titles start with "should select" for selection actions
    'test("Select': 'test("should select',

    // Ensures test titles start with "should submit" for submission actions
    'test("Submit': 'test("should submit',

    // Ensures test titles start with "should test" for clarity
    'test("Test': 'test("should test',

    // Ensures test titles start with "should upload" for upload actions
    'test("Upload': 'test("should upload',

    // Ensures test titles start with "should verify" for verification actions
    'test("Verify': 'test("should verify',

    // Already uses preferred "should" phrasing, no change needed
    'test("should': 'test("should',
};

/**
 * Post-processing function to apply all transformations.
 *
 * @param {string} codegenOutput - The generated test code to transform.
 * @returns {string} The transformed, lint-compliant test code.
 */
function applyLintCompliantTransforms(codegenOutput) {
    let transformed = codegenOutput;

    // Batch locator transformations using a single regex and replacer
    const locatorKeys = Object.keys(locatorTransforms).map((k) =>
        k.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")
    );
    if (locatorKeys.length > 0) {
        const locatorRegex = new RegExp(locatorKeys.join("|"), "g");
        transformed = transformed.replace(
            locatorRegex,
            (match) => locatorTransforms[match] ?? match
        );
    }

    // Batch title transformations using a single regex and replacer
    const titleKeys = Object.keys(titleTransforms).map((k) =>
        k.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")
    );
    if (titleKeys.length > 0) {
        const titleRegex = new RegExp(titleKeys.join("|"), "g");
        transformed = transformed.replace(
            titleRegex,
            (match) => titleTransforms[match] ?? match
        );
    }

    // Add describe block if missing and wrap all top-level test cases
    if (
        !transformed.includes("test.describe(") &&
        transformed.includes("test(")
    ) {
        // Find all import statements
        const importRegex = /^import.*?;$/gm;
        let lastImportMatch;
        let match;
        while ((match = importRegex.exec(transformed)) !== null) {
            lastImportMatch = match;
        }

        // Find all top-level test cases
        const testCaseRegex = /^test\([^]*?=>\s*{[^]*?}\s*\);?/gm;
        const testCases = [];
        let testMatch;
        while ((testMatch = testCaseRegex.exec(transformed)) !== null) {
            testCases.push({
                start: testMatch.index,
                end: testCaseRegex.lastIndex,
                code: testMatch[0],
            });
        }

        // Remove all top-level test cases from transformed
        let codeWithoutTests = transformed;
        for (let i = testCases.length - 1; i >= 0; i--) {
            codeWithoutTests =
                codeWithoutTests.slice(0, testCases[i].start) +
                codeWithoutTests.slice(testCases[i].end);
        }

        // Determine describe block name
        const firstTestTitleMatch =
            testCases.length > 0
                ? testCases[0].code.match(/test\("([^"]+)"/)
                : null;
        const describeName = firstTestTitleMatch
            ? firstTestTitleMatch[1]
                .replace(/^should\s+/, "")
                .replace(/\s+/g, " ")
            : "Generated Test";

        // Insert describe block after last import
        let insertionIndex = lastImportMatch
            ? lastImportMatch.index + lastImportMatch[0].length
            : 0;
        const describeBlock =
            `\n\ntest.describe("${describeName}", () => {\n` +
            testCases.map((tc) => tc.code).join("\n\n") +
            `\n});\n`;

        transformed =
            codeWithoutTests.slice(0, insertionIndex) +
            describeBlock +
            codeWithoutTests.slice(insertionIndex);
    }

    /**
     * Replace 'networkidle' with 'domcontentloaded' for waitForLoadState.
     * Rationale: 'networkidle' can be unreliable in modern SPAs and may cause
     * flaky tests. 'domcontentloaded' is generally sufficient for UI readiness
     * and is more stable. To change this behavior, update the
     * NETWORK_IDLE_REPLACEMENT constant below.
     */
    const NETWORK_IDLE_REPLACEMENT = "domcontentloaded";
    transformed = transformed.replace(
        /waitForLoadState\(['"]networkidle['"]\)/g,
        `waitForLoadState("${NETWORK_IDLE_REPLACEMENT}")`
    );

    // Add comments for body/html locators with consistent indentation
    transformed = transformed.replace(
        /^([ \t]*)page\.locator\(['"]body['"]\)/gm,
        (_, indent) =>
            `${indent}// TODO: Replace with semantic locator\n${indent}page.locator("body")`
    );
    transformed = transformed.replace(
        /^([ \t]*)page\.locator\(['"]html['"]\)/gm,
        (_, indent) =>
            `${indent}// TODO: Replace with semantic locator\n${indent}page.locator("html")`
    );

    return transformed;
}

/**
 * @module playwright/codegen-template
 *
 * @remarks
 * Exports the custom Playwright codegen template and transformation utilities.
 *
 * @exports applyLintCompliantTransforms - Applies all locator and title transformations, wraps tests in describe blocks, and post-processes generated code for lint compliance.
 * @exports locatorTransforms - Maps raw locator strings to semantic alternatives for improved readability and maintainability.
 * @exports testTemplate - The template string for generating Playwright test files with lint-compliant structure.
 * @exports titleTransforms - Maps raw test titles to standardized, lint-compliant forms.
 */
export {
    applyLintCompliantTransforms,
    locatorTransforms,
    testTemplate,
    titleTransforms,
};
