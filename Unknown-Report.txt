C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\electron\events\eventTypes.ts
  130,54: export interface UptimeEvents extends Record<string, unknown> {
  164,19:         newValue: unknown;
  165,19:         oldValue: unknown;
  201,24:         [key: string]: unknown;
  217,24:         [key: string]: unknown;
  233,24:         [key: string]: unknown;
  1023,46:  * const defaultPriority = getEventPriority("unknown:event"); // Returns "MEDIUM"

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\electron\events\middleware.ts
  81,32: type ValidatorFunction<TData = unknown> = (data: TData) => ValidationResult;
  91,44:  *   'data:update': { table: string; data: unknown };
  100,44: type ValidatorMap<T extends Record<string, unknown>> = Partial<{
  156,40:     return async (event: string, data: unknown, next: () => Promise<void> | void) => {
  199,40:     return async (event: string, data: unknown, next: () => Promise<void> | void) => {
  248,51:     onError?: (error: Error, event: string, data: unknown) => void;
  252,40:     return async (event: string, data: unknown, next: () => Promise<void> | void) => {
  301,39:     condition?: (event: string, data: unknown) => boolean;
  305,40:     return async (event: string, data: unknown, next: () => Promise<void> | void) => {
  357,40:     return async (event: string, data: unknown, next: () => Promise<void> | void) => {
  422,41:     return async (event: string, _data: unknown, next: () => Promise<void> | void) => {
  467,41:     onRateLimit?: (event: string, data: unknown) => void;
  472,40:     return async (event: string, data: unknown, next: () => Promise<void> | void) => {
  529,69: export function createValidationMiddleware<T extends Record<string, unknown>>(
  532,40:     return async (event: string, data: unknown, next: () => Promise<void> | void) => {
  734,30: function safeSerialize(data: unknown): unknown {
  734,40: function safeSerialize(data: unknown): unknown {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\electron\events\TypedEventBus.ts
  100,33: export type EventMiddleware<T = unknown> = (
  119,60: export class TypedEventBus<EventMap extends Record<string, unknown>> extends EventEmitter {
  455,60:                     _originalMeta: (data as Record<string, unknown>)["_meta"],
  463,52:         return { _meta: metadata, value: data } as unknown as T & { _meta: EventMetadata };
  479,62:     private async processMiddleware(eventName: string, data: unknown, correlationId: string): Promise<void> {
  522,69: export function createTypedEventBus<EventMap extends Record<string, unknown>>(

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\electron\managers\ConfigurationManager.ts
  67,53:     private readonly configCache: StandardizedCache<unknown>;
  120,50:         this.configCache = new StandardizedCache<unknown>({
  150,53:         configuration: ReturnType<StandardizedCache<unknown>["getStats"]>;

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\electron\services\commands\DatabaseCommands.ts
  146,57:     private readonly executedCommands: IDatabaseCommand<unknown>[] = [];
  180,68:             this.executedCommands.push(command as IDatabaseCommand<unknown>);

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\electron\services\database\utils\dynamicSchema.ts
  27,19:     defaultValue: unknown;
  31,25:     transform?: (value: unknown, monitor: Record<string, unknown>) => unknown;
  31,58:     transform?: (value: unknown, monitor: Record<string, unknown>) => unknown;
  31,71:     transform?: (value: unknown, monitor: Record<string, unknown>) => unknown;
  305,38:     const monitorRecord = monitor as unknown as Record<string, unknown>;
  305,64:     const monitorRecord = monitor as unknown as Record<string, unknown>;
  306,31:     const row: Record<string, unknown> = {};
  339,27:             const parsed: unknown = JSON.parse(row.active_operations);
  389,54: function convertEnabledField(monitor: Record<string, unknown>): number {
  399,62:  * Handles INTEGER and TEXT types; defaults to raw value for unknown types. Used internally for dynamic field mapping.
  410,37: function convertFromDatabase(value: unknown, sqlType: string): unknown {
  410,64: function convertFromDatabase(value: unknown, sqlType: string): unknown {
  438,47: function convertLastCheckedField(lastChecked: unknown): null | number {
  452,70:  * Handles INTEGER and TEXT types; defaults to stringified value for unknown types. Used internally for dynamic field mapping.
  463,35: function convertToDatabase(value: unknown, sqlType: string): unknown {
  463,62: function convertToDatabase(value: unknown, sqlType: string): unknown {
  505,48:             return "TEXT"; // Safe default for unknown types
  520,51: function mapDynamicFields(monitor: Record<string, unknown>, row: Record<string, unknown>): void {
  520,81: function mapDynamicFields(monitor: Record<string, unknown>, row: Record<string, unknown>): void {
  539,52: function mapStandardFields(monitor: Record<string, unknown>, row: Record<string, unknown>): void {
  539,82: function mapStandardFields(monitor: Record<string, unknown>, row: Record<string, unknown>): void {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\electron\services\database\utils\historyMapper.ts
  192,28: function safeNumber(value: unknown, fallback: number = 0): number {
  212,33: function validateStatus(status: unknown): StatusHistory["status"] {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\electron\services\database\utils\monitorMapper.ts
  67,35:             const value = (row as unknown as Record<string, unknown>)[column];
  67,61:             const value = (row as unknown as Record<string, unknown>)[column];
  95,55: export function isValidMonitorRow(row: Record<string, unknown>): boolean {
  284,23:         const parsed: unknown = JSON.parse(String(row.active_operations));

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\electron\services\database\utils\valueConverters.ts
  151,42: export function safeNumberConvert(value: unknown): number | undefined {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\electron\services\database\MonitorRepository.ts
  117,45:                         ) as Record<string, unknown> | undefined;
  232,78:         const insertResult = db.get(insertSql, parameters) as Record<string, unknown> | undefined;
  516,20:             row as unknown as Record<string, unknown>,
  516,46:             row as unknown as Record<string, unknown>,
  540,29:         row: Record<string, unknown>,
  576,57:     private convertValueForDatabase(key: string, value: unknown): DbValue | null {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\electron\services\factories\DatabaseServiceFactory.ts
  65,90:     importDataFromJson(data: string): Promise<{ settings: Record<string, string>; sites: unknown[] }>;
  66,32:     persistImportedData(sites: unknown[], settings: Record<string, string>): Promise<void>;

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\electron\services\ipc\IpcService.ts
  66,77:     validateAndLogUnexpectedProperties(unexpectedProperties: Record<string, unknown>, monitorType: string): void {
  304,29:             async (...args: unknown[]) => this.uptimeOrchestrator.importData(args[0] as string),
  312,29:             async (...args: unknown[]) => this.uptimeOrchestrator.setHistoryLimit(args[0] as number),
  378,29:             async (...args: unknown[]) => {
  390,29:             async (...args: unknown[]) => {
  402,29:             async (...args: unknown[]) => {
  446,23:             (...args: unknown[]) => {
  453,75:                     return details; // Return original details if type is unknown
  469,23:             (...args: unknown[]) => {
  471,59:                 const monitor = args[1] as Record<string, unknown>;
  476,66:                     return ""; // Return empty string if type is unknown
  492,23:             (...args: unknown[]) => {
  521,29:             async (...args: unknown[]) => this.uptimeOrchestrator.addSite(args[0] as Site),
  529,29:             async (...args: unknown[]) => this.uptimeOrchestrator.removeSite(args[0] as string),
  545,29:             async (...args: unknown[]) =>
  554,29:             async (...args: unknown[]) => this.uptimeOrchestrator.removeMonitor(args[0] as string, args[1] as string),

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\electron\services\ipc\types.ts
  11,45: export interface IpcHandlerConfig<TParams = unknown[], TResult = unknown> {
  11,66: export interface IpcHandlerConfig<TParams = unknown[], TResult = unknown> {
  17,31:     validateParams?: (params: unknown[]) => null | string[];
  28,46: export type IpcParameterValidator = (params: unknown[]) => null | string[];
  54,34: export interface IpcResponse<T = unknown> {
  60,31:     metadata?: Record<string, unknown>;
  76,60: export interface IpcValidationResponse extends IpcResponse<unknown> {
  80,30:     metadata: Record<string, unknown>;

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\electron\services\ipc\utils.ts
  27,29:     optionalString: (value: unknown, paramName: string): null | string => {
  41,29:     requiredNumber: (value: unknown, paramName: string): null | string => {
  55,29:     requiredObject: (value: unknown, paramName: string): null | string => {
  69,29:     requiredString: (value: unknown, paramName: string): null | string => {
  86,88: export function createErrorResponse<T = void>(error: string, metadata?: Record<string, unknown>): IpcResponse<T> {
  111,31:     metadata?: Record<string, unknown>,
  148,30:     metadata: Record<string, unknown> = {}
  185,24:     handler: (...args: unknown[]) => Promise<T> | T,
  191,52:     ipcMain.handle(channelName, async (_, ...args: unknown[]) => {
  280,24:     handler: (...args: unknown[]) => Promise<T> | T,
  282,13:     params: unknown[]

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\electron\services\ipc\validators.ts
  23,21:     return (params: unknown[]): null | string[] => {
  36,21:     return (params: unknown[]): null | string[] => {
  68,21:     return (params: unknown[]): null | string[] => {
  91,21:     return (params: unknown[]): null | string[] => {
  114,21:     return (params: unknown[]): null | string[] => {
  138,21:     return (params: unknown[]): null | string[] => {
  166,21:     return (params: unknown[]): null | string[] => {
  192,21:     return (params: unknown[]): null | string[] => {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\electron\services\monitoring\utils\errorHandling.ts
  88,12:  * Handles unknown errors that occur during health checks, with correlation tracking.
  93,23:  * @param error - The unknown error thrown during monitoring (can be any type).
  106,41: export function handleCheckError(error: unknown, url: string, correlationId?: string): MonitorCheckResult {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\electron\services\monitoring\utils\httpClient.ts
  43,40:     const createConfig: Record<string, unknown> = {
  132,15:  * Ensures an unknown value is an Error instance.
  137,23:  * @param error - The unknown error value.
  147,37: function ensureErrorInstance(error: unknown): Error {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\electron\services\monitoring\utils\pingErrorHandling.ts
  45,45: export function handlePingCheckError(error: unknown, context: PingOperationContext): MonitorCheckResult {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\electron\services\monitoring\utils\portErrorHandling.ts
  143,45: export function handlePortCheckError(error: unknown, host: string, port: number): PortCheckErrorResult {
  145,73:     // Extract response time from custom error if available, use -1 for unknown timing

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\electron\services\monitoring\MigrationSystem.ts
  71,38:     transform: (data: Record<string, unknown>) => Promise<Record<string, unknown>>;
  71,74:     transform: (data: Record<string, unknown>) => Promise<Record<string, unknown>>;
  146,30:         data: Record<string, unknown>,
  151,31:         data?: Record<string, unknown>;
  573,42:         transform: (data: Record<string, unknown>) =>
  599,42:         transform: (data: Record<string, unknown>) => {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\electron\services\monitoring\MonitorTypeRegistry.ts
  72,54:         formatTitleSuffix?: (monitor: Record<string, unknown>) => string;
  217,11:     data: unknown
  219,12:     data?: unknown;
  221,30:     metadata: Record<string, unknown>;
  252,44: function validateMonitorTypeInternal(type: unknown): {
  304,53:         formatTitleSuffix: (monitor: Record<string, unknown>) => {
  354,53:         formatTitleSuffix: (monitor: Record<string, unknown>) => {
  395,53:         formatTitleSuffix: (monitor: Record<string, unknown>) => {
  448,26:     data: Record<string, unknown>
  451,30:     monitor?: Record<string, unknown>;
  466,35:     const monitor: Record<string, unknown> = {
  485,47: export function isValidMonitorTypeGuard(type: unknown): type is string {
  530,27:     data?: Record<string, unknown>
  533,27:     data?: Record<string, unknown>;

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\electron\services\window\WindowService.ts
  169,51:     public sendToRenderer(channel: string, data?: unknown): void {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\electron\services\ServiceContainer.ts
  337,63:     public getInitializedServices(): { name: string; service: unknown }[] {
  338,50:         const services: { name: string; service: unknown }[] = [];
  339,42:         const serviceMap: Record<string, unknown> = {
  729,50:             managerEventBus.on(eventType, (data: unknown) => {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\electron\utils\cache\StandardizedCache.ts
  411,63:     private emitEvent(eventType: string, data: Record<string, unknown>): void {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\electron\utils\database\DataImportExportService.ts
  262,28: function isImportData(obj: unknown): obj is { settings?: Record<string, string>; sites: ImportSite[] } {
  263,92:     return typeof obj === "object" && obj !== null && Array.isArray((obj as Record<string, unknown>)["sites"]);

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\electron\utils\database\serviceFactory.ts
  25,37:     debug(message: string, ...args: unknown[]): void {
  29,36:     error(message: string, error?: unknown, ...args: unknown[]): void {
  29,54:     error(message: string, error?: unknown, ...args: unknown[]): void {
  33,36:     info(message: string, ...args: unknown[]): void {
  37,36:     warn(message: string, ...args: unknown[]): void {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\electron\utils\interfaces.ts
  21,39:     debug: (message: string, ...args: unknown[]) => void;
  34,38:     error: (message: string, error?: unknown, ...args: unknown[]) => void;
  34,56:     error: (message: string, error?: unknown, ...args: unknown[]) => void;
  42,38:     info: (message: string, ...args: unknown[]) => void;
  50,38:     warn: (message: string, ...args: unknown[]) => void;

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\electron\utils\logger.ts
  21,43:         debug: (message: string, ...args: unknown[]) => log.debug(`[${prefix}] ${message}`, ...args),
  22,42:         error: (message: string, error?: unknown, ...args: unknown[]) => {
  22,60:         error: (message: string, error?: unknown, ...args: unknown[]) => {
  29,42:         info: (message: string, ...args: unknown[]) => log.info(`[${prefix}] ${message}`, ...args),
  30,42:         warn: (message: string, ...args: unknown[]) => log.warn(`[${prefix}] ${message}`, ...args),

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\electron\utils\operationalHooks.ts
  13,45: export interface OperationalHooksConfig<T = unknown> {
  23,30:     context?: Record<string, unknown>;
  96,30:     context?: Record<string, unknown>
  191,29:     context: Record<string, unknown>

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\electron\utils\retry.ts
  39,27:         onError?: (error: unknown, attempt: number) => void;
  45,19:     const errors: unknown[] = [];

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\electron\preload.ts
  306,47:     onMonitorStatusChanged: (callback: (data: unknown) => void) => {
  307,62:         const handler = (_: Electron.IpcRendererEvent, data: unknown) => {
  483,70:     formatMonitorTitleSuffix: (type: string, monitor: Record<string, unknown>) =>
  500,47:     validateMonitorData: (type: string, data: unknown) => ipcRenderer.invoke("validate-monitor-data", type, data),

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\electron\UptimeOrchestrator.ts
  674,73:         this.on("internal:site:added", (data: SiteEventData & { _meta?: unknown }) => {
  686,75:         this.on("internal:site:removed", (data: SiteEventData & { _meta?: unknown }) => {
  699,75:         this.on("internal:site:updated", (data: SiteEventData & { _meta?: unknown; previousSite?: Site }) => {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\shared\types\chartConfig.ts
  65,27:     data?: Record<string, unknown>;
  343,36: export function hasPlugins(config: unknown): config is { plugins: ChartPluginsConfig } {
  348,42:         typeof (config as Record<string, unknown>)["plugins"] === "object"
  360,35: export function hasScales(config: unknown): config is { scales: ChartScalesConfig } {
  365,42:         typeof (config as Record<string, unknown>)["scales"] === "object"

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\shared\types\database.ts
  186,26:     isValidObject: (obj: unknown): obj is Record<string, unknown> => {
  186,58:     isValidObject: (obj: unknown): obj is Record<string, unknown> => {
  193,28:     isValidStatus: (value: unknown): value is "down" | "up" => {
  200,31:     isValidTimestamp: (value: unknown): boolean => {
  221,40: export function isValidHistoryRow(obj: unknown): obj is HistoryRow {
  250,40: export function isValidMonitorRow(obj: unknown): obj is MonitorRow {
  279,41: export function isValidSettingsRow(obj: unknown): obj is SettingsRow {
  284,39:     const row = obj as Record<string, unknown>;
  303,37: export function isValidSiteRow(obj: unknown): obj is SiteRow {
  308,39:     const row = obj as Record<string, unknown>;
  336,59: export function safeGetRowProperty<T>(row: Record<string, unknown>, property: string, defaultValue: T): T {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\shared\types\events.ts
  5,38:  * These interfaces replace generic `unknown` types, ensuring strict typing for all event payloads exchanged between the Electron main process and renderer.
  100,18:     parameters?: unknown[];
  319,20:     [key: string]: unknown;

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\shared\types\formData.ts
  115,25:     validator?: (value: unknown) => null | string;

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\shared\types\themeConfig.ts
  246,5:     unknown: string;
  442,37: export function isColorPalette(obj: unknown): obj is ColorPalette {
  447,43:     const palette = obj as Record<string, unknown>;
  471,36: export function isThemeConfig(obj: unknown): obj is ThemeConfig {
  476,41:     const theme = obj as Record<string, unknown>;

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\shared\utils\environment.ts
  21,34:  * @returns Environment name or 'unknown' if not set
  24,13:  * Returns 'unknown' as fallback to indicate unspecified environment state.
  31,46:     return typeof process === "undefined" ? "unknown" : (nodeEnv ?? "unknown");
  31,70:     return typeof process === "undefined" ? "unknown" : (nodeEnv ?? "unknown");

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\shared\utils\errorHandling.ts
  14,35:         error: (msg: string, err: unknown) => void;
  182,96: function safeStoreOperation(storeOperation: () => void, operationName: string, originalError?: unknown): void {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\shared\utils\jsonSafety.ts
  38,66: export function safeJsonParse<T>(json: string, validator: (data: unknown) => data is T): SafeJsonResult<T> {
  40,23:         const parsed: unknown = JSON.parse(json);
  80,30:     elementValidator: (item: unknown) => item is T
  83,23:         const parsed: unknown = JSON.parse(json);
  133,78: export function safeJsonParseWithFallback<T>(json: string, validator: (data: unknown) => data is T, fallback: T): T {
  155,42: export function safeJsonStringify(value: unknown, space?: number | string): SafeJsonResult<string> {
  193,54: export function safeJsonStringifyWithFallback(value: unknown, fallback: string, space?: number | string): string {
  205,29: function ensureError(error: unknown): Error {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\shared\utils\objectSafety.ts
  24,18:  * const config: unknown = { timeout: 5000 };
  30,10:     obj: unknown,
  33,25:     validator?: (value: unknown) => value is T
  44,49:     const typedObj = obj as Record<PropertyKey, unknown>;
  63,48:  * @param obj - Object to iterate over (can be unknown)
  69,10:     obj: unknown,
  70,36:     callback: (key: string, value: unknown) => void,
  105,62: export function safeObjectOmit<T extends Record<PropertyKey, unknown>, K extends keyof T>(
  134,62: export function safeObjectPick<T extends Record<PropertyKey, unknown>, K extends keyof T>(
  168,66: export function typedObjectEntries<T extends Record<PropertyKey, unknown>>(obj: T): Array<[keyof T, T[keyof T]]> {
  192,63: export function typedObjectKeys<T extends Record<PropertyKey, unknown>>(obj: T): Array<keyof T> {
  216,65: export function typedObjectValues<T extends Record<PropertyKey, unknown>>(obj: T): Array<T[keyof T]> {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\shared\utils\safeConversions.ts
  28,45: export function safeNumberConversion(value: unknown, defaultValue = 0): number {
  44,47: export function safeParseCheckInterval(value: unknown, defaultValue = 300_000): number {
  69,39: export function safeParseFloat(value: unknown, defaultValue = 0): number {
  103,37: export function safeParseInt(value: unknown, defaultValue = 0): number {
  135,44: export function safeParsePercentage(value: unknown, defaultValue = 0): number {
  160,38: export function safeParsePort(value: unknown, defaultValue = 80): number {
  185,45: export function safeParsePositiveInt(value: unknown, defaultValue = 1): number {
  210,47: export function safeParseRetryAttempts(value: unknown, defaultValue = 3): number {
  235,41: export function safeParseTimeout(value: unknown, defaultValue = 10_000): number {
  262,43: export function safeParseTimestamp(value: unknown, defaultValue?: number): number {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\shared\utils\siteStatus.ts
  59,16:  * - Returns `"unknown"` if there are no monitors.
  67,65:  * // status: "up" | "down" | "pending" | "paused" | "mixed" | "unknown"
  74,17:         return "unknown";
  94,16:  * - Returns `"unknown"` if there are no monitors.
  105,72:  * // displayStatus: "up" | "down" | "pending" | "paused" | "mixed" | "unknown"
  112,38:     // If no monitors exist, show as unknown
  114,17:         return "unknown";
  164,15:         case "unknown": {
  182,52:  * - `"error"`: All monitors are down or status is unknown (`"down"` or `"unknown"`).
  182,75:  * - `"error"`: All monitors are down or status is unknown (`"down"` or `"unknown"`).
  208,15:         case "unknown": {
  215,27:             // Align with unknown status handling - treat unexpected values as errors

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\shared\utils\stringConversion.ts
  51,38: export function safeStringify(value: unknown): string {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\shared\utils\typeGuards.ts
  28,12:     value: unknown,
  30,23: ): value is Record<K, unknown> {
  49,59: export function hasProperty<K extends PropertyKey>(value: unknown, property: K): value is Record<K, unknown> {
  49,101: export function hasProperty<K extends PropertyKey>(value: unknown, property: K): value is Record<K, unknown> {
  68,29: export function isArray<T = unknown>(value: unknown, itemValidator?: (item: unknown) => item is T): value is T[] {
  68,45: export function isArray<T = unknown>(value: unknown, itemValidator?: (item: unknown) => item is T): value is T[] {
  68,77: export function isArray<T = unknown>(value: unknown, itemValidator?: (item: unknown) => item is T): value is T[] {
  94,34: export function isBoolean(value: unknown): value is boolean {
  111,31: export function isDate(value: unknown): value is Date {
  121,32: export function isError(value: unknown): value is Error {
  131,39: export function isFiniteNumber(value: unknown): value is number {
  144,25:  *   // fn is (...args: unknown[]) => unknown
  144,39:  *   // fn is (...args: unknown[]) => unknown
  148,35: export function isFunction(value: unknown): value is (...args: unknown[]) => unknown {
  148,64: export function isFunction(value: unknown): value is (...args: unknown[]) => unknown {
  148,78: export function isFunction(value: unknown): value is (...args: unknown[]) => unknown {
  158,44: export function isNonNegativeNumber(value: unknown): value is number {
  168,40: export function isNonNullObject(value: unknown): value is Record<string, unknown> {
  168,74: export function isNonNullObject(value: unknown): value is Record<string, unknown> {
  178,33: export function isNumber(value: unknown): value is number {
  188,33: export function isObject(value: unknown): value is Record<string, unknown> {
  188,67: export function isObject(value: unknown): value is Record<string, unknown> {
  198,41: export function isPositiveNumber(value: unknown): value is number {
  208,33: export function isString(value: unknown): value is string {
  218,36: export function isValidPort(value: unknown): value is number {
  229,41: export function isValidTimestamp(value: unknown): value is number {
  246,35: export function isValidUrl(value: unknown): value is string {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\shared\utils\validation.ts
  39,43: export function validateMonitorType(type: unknown): type is MonitorType {
  66,39:         site.monitors.every((monitor: unknown) => isPartialMonitor(monitor) && validateMonitor(monitor))
  76,34: function isPartialMonitor(value: unknown): value is Partial<Monitor> {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\shared\validation\schemas.ts
  229,12:     data?: unknown;
  237,30:     metadata: Record<string, unknown>;
  273,57: export function validateMonitorData(type: string, data: unknown): ValidationResult {
  347,39:  * @throws Error If the field name is unknown for the given monitor type.
  349,78: export function validateMonitorField(type: string, fieldName: string, value: unknown): ValidationResult {
  405,40: export function validateSiteData(data: unknown): ValidationResult {
  447,68:  * @returns The Zod schema for the monitor type, or `undefined` if unknown.
  465,39:  * @throws Error If the field name is unknown for the monitor type.
  468,74: function validateFieldWithSchema(type: string, fieldName: string, value: unknown): Record<string, unknown> {
  468,99: function validateFieldWithSchema(type: string, fieldName: string, value: unknown): Record<string, unknown> {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\shared\validation\validatorUtils.ts
  49,41: export function isNonEmptyString(value: unknown): value is string {
  68,36: export function isValidFQDN(value: unknown, options?: Parameters<typeof validator.isFQDN>[1]): value is string {
  87,42: export function isValidIdentifier(value: unknown): value is string {
  111,47: export function isValidIdentifierArray(value: unknown): value is string[] {
  135,39: export function isValidInteger(value: unknown, options?: Parameters<typeof validator.isInt>[1]): value is string {
  154,39: export function isValidNumeric(value: unknown, options?: Parameters<typeof validator.isFloat>[1]): value is string {
  173,35: export function isValidUrl(value: unknown, options?: Parameters<typeof validator.isURL>[1]): value is string {
  213,36: export function safeInteger(value: unknown, defaultValue: number, min?: number, max?: number): number {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\shared\types.ts
  54,58:  * Can be a monitor status or special values "mixed" or "unknown".
  58,37: export type SiteStatus = "mixed" | "unknown" | MonitorStatus;
  86,19:  * @defaultValue "unknown"
  89,49: export const DEFAULT_SITE_STATUS: SiteStatus = "unknown";
  130,76: export function isComputedSiteStatus(status: string): status is "mixed" | "unknown" {
  131,23:     return ["mixed", "unknown"].includes(status);
  144,10:         "unknown",
  175,52: function isValidActiveOperations(activeOperations: unknown): activeOperations is string[] {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\src\components\AddSiteForm\Submit.tsx
  198,19: ): Record<string, unknown> {
  199,39:     const monitorData: Record<string, unknown> = {
  247,25:             (monitor as unknown as Record<string, unknown>)[key] = value;
  247,51:             (monitor as unknown as Record<string, unknown>)[key] = value;
  349,36:     const formData: Record<string, unknown> = {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\src\components\Dashboard\SiteCard\SiteCardStatus.tsx
  51,56:     const safeMonitorId = String(selectedMonitorId || "unknown");

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\src\components\Settings\Settings.tsx
  84,69:     const handleSettingChange = (key: keyof typeof settings, value: unknown) => {
  132,25:         } catch (error: unknown) {
  149,25:         } catch (error: unknown) {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\src\components\SiteDetails\tabs\SiteOverviewTab.tsx
  108,23:                 case "unknown": {
  109,55:                     return currentTheme.colors.status.unknown;

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\src\components\SiteDetails\ScreenshotThumbnail.tsx
  232,31: function hasOpenExternal(api: unknown): api is { openExternal: (url: string) => void } {
  233,44:     return typeof (api as { openExternal?: unknown }).openExternal === "function";

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\src\components\SiteDetails\SiteDetailsHeader.tsx
  70,92:                             <StatusIndicator size="lg" status={selectedMonitor?.status ?? "unknown"} />
  91,67:                                             window.electronAPI as unknown as {
  147,31: function hasOpenExternal(api: unknown): api is { openExternal: (url: string) => void } {
  148,44:     return typeof (api as { openExternal?: unknown }).openExternal === "function";

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\src\components\SiteDetails\SiteDetailsNavigation.tsx
  74,72:     const logTabChange = (tab: string, additionalData?: Record<string, unknown>) => {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\src\services\logger.ts
  38,42:     const transports = log.transports as unknown as Record<string, unknown>;
  38,68:     const transports = log.transports as unknown as Record<string, unknown>;
  83,39:     debug: (message: string, ...args: unknown[]) => {
  91,54:     error: (message: string, error?: Error, ...args: unknown[]) => {
  110,38:     info: (message: string, ...args: unknown[]) => {
  133,39:     silly: (message: string, ...args: unknown[]) => {
  179,44:         action: (action: string, details?: unknown) => {
  182,53:         settingsChange: (setting: string, oldValue: unknown, newValue: unknown) => {
  182,72:         settingsChange: (setting: string, oldValue: unknown, newValue: unknown) => {
  189,41:     verbose: (message: string, ...args: unknown[]) => {
  197,38:     warn: (message: string, ...args: unknown[]) => {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\src\stores\shared\utils.ts
  11,77: export function logStoreAction(storeName: string, action: string, payload?: unknown): void {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\src\stores\sites\utils\fileDownload.ts
  194,37: function handleDownloadError(error: unknown, buffer: ArrayBuffer, fileName: string, mimeType: string): void {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\src\stores\sites\utils\monitorOperations.ts
  225,36: function validateMonitorType(type: unknown): MonitorType {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\src\stores\sites\utils\statusUpdateHandler.ts
  162,93:         const statusUpdateCleanup = window.electronAPI.events.onMonitorStatusChanged((data: unknown) => {
  370,47:     private isMonitorStatusChangedEvent(data: unknown): data is MonitorStatusChangedEvent {
  375,47:         const record = data as Record<string, unknown>;

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\src\stores\sites\useSiteSync.ts
  157,70:                         actions.syncSitesFromBackend().catch((error: unknown) => {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\src\stores\types.ts
  79,50:     [K in keyof T]: T[K] extends (...arguments_: unknown[]) => unknown ? T[K] : never;
  79,64:     [K in keyof T]: T[K] extends (...arguments_: unknown[]) => unknown ? T[K] : never;
  104,50:     [K in keyof T]: T[K] extends (...arguments_: unknown[]) => unknown ? never : T[K];
  104,64:     [K in keyof T]: T[K] extends (...arguments_: unknown[]) => unknown ? never : T[K];

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\src\stores\utils.ts
  99,36: export const debounce = <T extends unknown[]>(
  137,78: export const logStoreAction = (storeName: string, actionName: string, data?: unknown) => {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\src\theme\themes.ts
  60,13:             unknown: "#6b7280",
  211,13:             unknown: "#9ca3af",
  300,13:             unknown: "#ffffff",

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\src\theme\types.ts
  95,9:         unknown: string;

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\src\theme\useTheme.ts
  92,5:     unknown: string;
  100,9:         unknown: currentTheme.colors.status.unknown,
  100,45:         unknown: currentTheme.colors.status.unknown,
  234,20:         let value: unknown = currentTheme.colors;
  237,50:                 value = (value as Record<string, unknown>)[key];

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\src\types\events.ts
  3,22:  * Replaces generic `unknown` types in IPC event callbacks.
  67,26:     data: Record<string, unknown>;

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\src\types\ipc.ts
  23,31:     metadata?: Record<string, unknown>;
  39,45: export function extractIpcData<T>(response: unknown): T {
  59,41: export function isIpcResponse<T>(value: unknown): value is IpcResponse<T> {
  64,37:         typeof (value as { success: unknown }).success === "boolean"
  77,49: export function safeExtractIpcData<T>(response: unknown, fallback: T): T {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\src\types\monitor-forms.ts
  3,37:  * Replaces generic `Record<string, unknown>` patterns.
  47,55:     object: (fieldName: string, value: Record<string, unknown>) => void;
  61,44:     objects: Record<string, Record<string, unknown>>;
  119,8:  * For unknown monitor types, this function falls back to HTTP monitor fields
  156,44:             // Fallback to HTTP fields for unknown types

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\src\types\monitorFormData.ts
  33,57: export interface DynamicFormData extends Record<string, unknown> {
  140,46: export function isValidMonitorFormData(data: unknown): data is MonitorFormData {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\src\utils\cache.ts
  187,37:     general: new TypedCache<string, unknown>({ maxSize: 200, ttl: 2 * 60 * 1000 }), // 2 minutes
  190,42:     monitorTypes: new TypedCache<string, unknown>({ maxSize: 50, ttl: 5 * 60 * 1000 }), // 5 minutes
  193,39:     uiHelpers: new TypedCache<string, unknown>({ maxSize: 100, ttl: 10 * 60 * 1000 }), // 10 minutes

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\src\utils\chartUtils.ts
  18,48: export function getNestedScaleProperty(config: unknown, axis: "x" | "y", path: string): unknown {
  18,89: export function getNestedScaleProperty(config: unknown, axis: "x" | "y", path: string): unknown {
  25,18:     let current: unknown = scale;
  28,101:         if (typeof current !== "object" || current === null || !(part in (current as Record<string, unknown>))) {
  32,46:         current = (current as Record<string, unknown>)[part];
  45,40: export function getScaleConfig(config: unknown, axis: "x" | "y"): Record<string, unknown> | undefined {
  45,82: export function getScaleConfig(config: unknown, axis: "x" | "y"): Record<string, unknown> | undefined {
  50,52:     const scales = config.scales as Record<string, unknown>;
  53,87:         return typeof scale === "object" && scale !== null ? (scale as Record<string, unknown>) : undefined;
  67,42: export function getScaleProperty(config: unknown, axis: "x" | "y", property: string): unknown {
  67,87: export function getScaleProperty(config: unknown, axis: "x" | "y", property: string): unknown {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\src\utils\errorHandling.ts
  10,13:  * Converts unknown error types to proper Error instances.
  15,36: export function ensureError(error: unknown): Error {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\src\utils\fallbacks.ts
  18,42: export function isNullOrUndefined(value: unknown): value is null | undefined {
  133,40:  * getMonitorDisplayIdentifier({type: "unknown"}, "My Site");
  203,32:  * getMonitorTypeDisplayLabel("unknown"); // "Unknown Monitor"

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\src\utils\monitorUiHelpers.ts
  110,28:                 monitor as unknown as Record<string, unknown>
  110,54:                 monitor as unknown as Record<string, unknown>

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\src\utils\monitorValidation.ts
  24,20:     [key: string]: unknown;
  135,89: export async function validateMonitorField(type: MonitorType, fieldName: string, value: unknown): Promise<string[]> {
  139,40:             const data: Record<string, unknown> = {
  185,12:     value: unknown

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\src\utils\status.ts
  33,71:  * @returns Emoji string representing the status (defaults to "⚪" for unknown statuses)
  37,34:  * down, mixed, paused, pending, unknown, up. Unknown statuses return a neutral icon.
  53,15:         case "unknown": {

C:\Users\Nick\Dropbox\PC (2)\Documents\GitHub\Uptime-Watcher\src\types.ts
  187,82:                 formatMonitorTitleSuffix: (type: string, monitor: Record<string, unknown>) => Promise<string>;
  218,27:                     data: unknown