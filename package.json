{
  "$schema": "https://www.schemastore.org/package.json",
  "name": "uptime-watcher",
  "version": "15.6.0",
  "description": "An Electron app to monitor website uptime status",
  "keywords": [
    "electron",
    "react",
    "uptime",
    "monitoring"
  ],
  "homepage": "https://github.com/Nick2bad4u/Uptime-Watcher",
  "bugs": {
    "url": "https://github.com/Nick2bad4u/Uptime-Watcher/issues",
    "email": "20943337+Nick2bad4u@users.noreply.github.com"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Nick2bad4u/Uptime-Watcher.git"
  },
  "license": "Unlicense",
  "author": "Nick2bad4u <20943337+Nick2bad4u@users.noreply.github.com> (https://nick2bad4u.github.io/Uptime-Watcher/)",
  "maintainers": [
    {
      "name": "Nick2bad4u",
      "email": "20943337+Nick2bad4u@users.noreply.github.com"
    }
  ],
  "contributors": [
    {
      "name": "Nick2bad4u",
      "email": "20943337+Nick2bad4u@users.noreply.github.com",
      "url": "https://github.com/Nick2bad4u"
    }
  ],
  "type": "commonjs",
  "main": "dist-electron/main.js",
  "scripts": {
    "ai:context": "npm run context",
    "bench": "vitest bench --run",
    "bench:compare": "vitest bench --run --compare",
    "bench:tsnode": "ts-node ./benchmarks/eventSystem.bench.ts",
    "bench:tsnode:loader": "node --loader ts-node/esm ./benchmarks/eventSystem.bench.ts",
    "bench:ui": "vitest bench --ui",
    "bench:watch": "vitest bench",
    "build": "npm run build:electron-vite",
    "postbuild": "npm run copy-wasm",
    "build:electron-main": "npm run build",
    "build:electron-vite": "tsc --build tsconfig.json && vite build --config ./vite.config.ts",
    "build:eslint-inspector": "npx @eslint/config-inspector build --outDir \"docs/docusaurus/static/eslint-inspector\" --base \"/Uptime-Watcher/eslint-inspector/\"",
    "build:eslint-inspector:local": "npm run build:eslint-inspector",
    "build:prepublish": "npm run lint && npm run test && npm run build",
    "build:shared": "tsc --build tsconfig.shared.json",
    "check-types": "tsc --build && npm run check:shared && npm run check:electron && npm run check:frontend",
    "check-types:all": "tsc --build && npm run check:shared && npm run check:electron && npm run check:frontend && npm run check:electron:test && npm run check:frontend:test && npm run check:benchmarks:test && npm run check:shared:test && npm run check:configs:test && npm run check:playwright",
    "check:all": "npm run check-types:all",
    "check:all:test": "npm run check:shared:test && npm run check:electron:test && npm run check:frontend:test && npm run check:benchmarks:test && npm run check:configs:test && npm run check:playwright",
    "check:benchmarks": "tsc --build config/benchmarks/tsconfig.bench.json",
    "check:benchmarks:test": "tsc --build config/benchmarks/tsconfig.bench.json",
    "check:configs": "tsc --build config/testing/tsconfig.configs.json",
    "check:configs:test": "tsc --build config/testing/tsconfig.configs.json",
    "check:electron": "tsc --build tsconfig.electron.json",
    "check:electron:test": "tsc --build config/testing/tsconfig.electron.test.json",
    "check:frontend": "tsc --build tsconfig.json",
    "check:frontend:test": "tsc --build config/testing/tsconfig.test.json",
    "check:playwright": "tsc --build playwright/tsconfig.json",
    "check:shared": "tsc --build tsconfig.shared.json",
    "check:shared:test": "tsc --build config/testing/tsconfig.shared.test.json",
    "clean": "rimraf dist dist-electron dist-shared coverage .vite .turbo",
    "postclean": "npm run copy-wasm",
    "cognitive-complexity": "cognitive-complexity-ts --threshold 10",
    "commit": "git-cz",
    "context": "repomix --config config/tools/repomix.config.json --compress --include \"src/**,electron/**,shared/**\" --ignore \"**/test/**\"",
    "copy-sqlite": "npm run copy-wasm",
    "copy-wasm": "cpy node_modules/node-sqlite3-wasm/dist/node-sqlite3-wasm.wasm dist-electron/ --flat",
    "debug:electron": "electron --inspect=5858 .",
    "debug:main": "electron --inspect-brk=5858 .",
    "debug:mcp": "npm run build && electron --enable-mcp-debugging .",
    "debug:renderer": "npm run debug:vite",
    "debug:transform": "vite --debug plugin-transform",
    "debug:vite": "vite --debug",
    "dep:check": "npm-check",
    "dep:update": "npm-check-updates -u && npm install",
    "detect-secrets": "detect-secrets scan",
    "dev": "vite",
    "dev:profile": "npm run profile",
    "dev:sqlite3": "npm run copy-wasm",
    "dev:warmup": "vite --debug transform",
    "dev:with-sqlite3": "npm run dev:sqlite3 && npm run dev",
    "dist": "npm run build && electron-builder --publish=never",
    "docs": "typedoc --out docs src",
    "docs:build": "npm run docs:typedoc && npm run build:eslint-inspector && cd docs/docusaurus && yarn build",
    "docs:build:local": "npm run docs:build",
    "docs:clean": "rimraf docs",
    "docs:deploy": "npm run docs:typedoc && npm run build:eslint-inspector && cd docs/docusaurus && yarn deploy",
    "docs:deploy:local": "npm run docs:deploy",
    "docs:download:all": "npm run docs:download:axios && npm run docs:download:react && npm run docs:download:chartjs && npm run docs:download:zustand && npm run docs:download:electron && npm run docs:download:validator && npm run docs:download:zod && npm run docs:download:sqlite3 && npm run docs:download:sqlite3-wasm && npm run docs:download:nodeping && npm run docs:download:tsdoc",
    "docs:download:axios": "node scripts/download-axios-docs.mjs",
    "docs:download:chartjs": "node scripts/download-chartjs-docs.mjs",
    "docs:download:electron": "node scripts/download-electron-docs.mjs",
    "docs:download:nodeping": "node scripts/download-NodePing-docs.mjs",
    "docs:download:react": "node scripts/download-react-docs.mjs",
    "docs:download:sqlite3": "node scripts/download-nodeSqlite3-docs.mjs",
    "docs:download:sqlite3-wasm": "node scripts/download-nodeSqlite3Wasm-docs.mjs",
    "docs:download:tsdoc": "node scripts/download-tsdoc-tags.mjs",
    "docs:download:validator": "node scripts/download-validator-docs.mjs",
    "docs:download:zod": "node scripts/download-Zod-docs.mjs",
    "docs:download:zustand": "node scripts/download-zustand-docs.mjs",
    "docs:preview": "serve docs",
    "docs:typedoc": "cd docs/docusaurus && typedoc --options typedoc.config.json",
    "docs:typedoc:local": "cd docs/docusaurus && typedoc --options typedoc.local.config.json",
    "docusaurus:broken-links": "npm run docs:typedoc && cd docs/docusaurus && npx docusaurus check",
    "docusaurus:broken-links:local": "npm run docs:typedoc && npm run build:eslint-inspector && cd docs/docusaurus && npx docusaurus check",
    "docusaurus:build": "npm run docs:typedoc && npm run build:eslint-inspector && cd docs/docusaurus && npx docusaurus build",
    "docusaurus:build:local": "npm run docs:typedoc:local && npm run build:eslint-inspector && cd docs/docusaurus && npx docusaurus build",
    "docusaurus:clean": "npm run docs:typedoc && cd docs/docusaurus && npx docusaurus clear",
    "docusaurus:clean:local": "npm run docs:typedoc:local && cd docs/docusaurus && npx docusaurus clear",
    "docusaurus:serve": "npm run docs:typedoc && npm run build:eslint-inspector && cd docs/docusaurus && npx docusaurus serve",
    "docusaurus:serve:local": "npm run docs:typedoc && npm run build:eslint-inspector && cd docs/docusaurus && npx docusaurus serve",
    "docusaurus:sitemap": "npm run docs:typedoc && npm run build:eslint-inspector && cd docs/docusaurus && npx docusaurus sitemap",
    "docusaurus:sitemap:local": "npm run docs:typedoc && npm run build:eslint-inspector && cd docs/docusaurus && npx docusaurus sitemap",
    "docusaurus:start": "npm run docs:typedoc && npm run build:eslint-inspector && cd docs/docusaurus && npx docusaurus start",
    "docusaurus:start:local": "npm run docs:typedoc && npm run build:eslint-inspector && cd docs/docusaurus && npx docusaurus start",
    "dupes": "jscpd src/ electron/ shared/",
    "duplicates": "npm run dupes",
    "electron": "wait-on tcp:5173 && electron .",
    "electron-dev": "concurrently \"npm run dev\" \"npm run electron\"",
    "electron-dev:debug": "concurrently \"npm run dev\" \"npm run electron:debug\"",
    "electron-dev:info": "concurrently \"npm run dev\" \"npm run electron:info\"",
    "electron-dev:production": "concurrently \"npm run dev\" \"npm run electron:production\"",
    "electron-main:debug": "npm run build:electron-main && NODE_ENV=development ./node_modules/.bin/electron ./dist-electron/main.js",
    "electron-only": "npm run start:electron",
    "electron-pack": "electron-builder",
    "electron:debug": "wait-on tcp:5173 && electron . --debug",
    "electron:info": "wait-on tcp:5173 && electron . --log-info",
    "electron:log:debug": "electron --log-debug .",
    "electron:log:info": "electron --log-info .",
    "electron:log:prod": "electron --log-production .",
    "electron:production": "wait-on tcp:5173 && electron . --log-production",
    "eslint-find-rules:all": "eslint-find-rules --all-available --flatConfig .\\eslint.config.mjs",
    "eslint-find-rules:current": "eslint-find-rules --current --flatConfig .\\eslint.config.mjs",
    "eslint-find-rules:deprecated": "eslint-find-rules --deprecated --flatConfig .\\eslint.config.mjs",
    "eslint-find-rules:plugin": "eslint-find-rules --plugin --flatConfig .\\eslint.config.mjs",
    "eslint-find-rules:unused": "eslint-find-rules --unused --flatConfig .\\eslint.config.mjs",
    "fetch-tsdoc": "npm run tsdoc-update",
    "find-empty-dirs": "node .\\scripts\\find-empty-dirs.mjs",
    "find-empty-dirs:all": "node .\\scripts\\find-empty-dirs.mjs --dirs \".\\\"",
    "find-empty-dirs:all:delete": "node .\\scripts\\find-empty-dirs.mjs --dirs \".\\\" --delete",
    "find-empty-dirs:delete": "node .\\scripts\\find-empty-dirs.mjs --delete",
    "fix-db": "npm run copy-wasm",
    "format": "npm run lint:prettier-fix && npm run lint:css-fix && npm run lint:fix && npm run remark:fix",
    "format:check": "npm run lint:prettier && npm run lint:css && npm run lint:check && npm run remark:check",
    "fuzz": "vitest run --reporter=default -t \"fuzz|fuzzing\"",
    "fuzz:all": "npm run fuzz && npm run fuzz:electron && npm run fuzz:shared",
    "fuzz:coverage": "vitest run --coverage --reporter=default -t \"fuzz|fuzzing\"",
    "fuzz:detailed": "vitest run --reporter=verbose --no-truncate -t \"fuzz|fuzzing\"",
    "fuzz:electron": "vitest run --config vitest.electron.config.ts --reporter=default -t \"fuzz|fuzzing\"",
    "fuzz:minimal": "vitest run --reporter=dot -t \"fuzz|fuzzing\"",
    "fuzz:quiet": "vitest run --reporter=default --silent -t \"fuzz|fuzzing\"",
    "fuzz:shared": "vitest run --config vitest.shared.config.ts --reporter=default -t \"fuzz|fuzzing\"",
    "fuzz:verbose": "vitest run --reporter=verbose -t \"fuzz|fuzzing\"",
    "git:branch-cleanup": "git branch --merged | grep -v \"\\*\\|main\\|master\\|develop\" | xargs -n 1 git branch -d",
    "git:log": "git log --oneline -10",
    "git:log-graph": "git log --graph --oneline --decorate -10",
    "git:recover": "echo \"Recent commits in reflog:\" && git reflog --oneline -10 && echo \"\\nTo recover to a specific commit, use: npm run git:safe-reset <commit-hash>\"",
    "git:reflog": "git reflog --oneline -15",
    "git:reset-soft": "npm run git:uncommit",
    "git:safe-reset": "powershell -Command \"Write-Host 'WARNING: This will reset to the specified commit!' -ForegroundColor Red; Write-Host 'Current HEAD:' -NoNewline; git log --oneline -1; Write-Host 'Use: npm run git:safe-reset-to <commit-hash> to proceed'\"",
    "git:safe-reset-to": "powershell -Command \"param($commit) if (-not $commit) { Write-Host 'Usage: npm run git:safe-reset-to <commit-hash>' -ForegroundColor Red; exit 1 } Write-Host 'WARNING: Resetting to commit:' $commit -ForegroundColor Red; Write-Host 'Current HEAD:' -NoNewline; git log --oneline -1; $confirm = Read-Host 'Type YES to confirm'; if ($confirm -eq 'YES') { git reset --hard $commit } else { Write-Host 'Reset cancelled' -ForegroundColor Yellow }\"",
    "git:stash-all": "powershell -Command \"$timestamp = Get-Date -Format 'yyyy-MM-dd_HH-mm-ss'; git stash push -u -m \\\"Emergency stash: $timestamp\\\"\"",
    "git:status": "git status --short --branch",
    "git:uncommit": "git reset --soft HEAD~1",
    "git:undo-reset": "powershell -Command \"Write-Host 'Recent reflog entries:' -ForegroundColor Yellow; git reflog --oneline -5; Write-Host ''; Write-Host 'To undo reset, find the commit before reset and run:' -ForegroundColor Green; Write-Host 'git reset --hard HEAD@{n}' -ForegroundColor Cyan; Write-Host 'OR use: npm run git:safe-reset-to HEAD@{n}' -ForegroundColor Cyan\"",
    "postinstall": "node scripts/download-sqlite3-wasm.mjs",
    "install:dev": "npm install --save-dev",
    "install:force": "npm install --force",
    "install:prod": "npm install --save",
    "knip": "npx knip -c config/tools/knip.config.ts --include-libs --cache --cache-location .cache/knip --tsConfig tsconfig.json",
    "lint": "cross-env NODE_OPTIONS=--max_old_space_size=16384 eslint --cache --cache-strategy content --cache-location .cache/.eslintcache",
    "lint-pretty": "npm run lint && npm run lint:prettier",
    "lint-pretty:fix": "npm run lint:fix && npm run lint:prettynow",
    "lint:action": "actionlint -config-file config/linting/ActionLintConfig.yaml -color",
    "lint:actions": "actionlint -config-file config/linting/ActionLintConfig.yaml -color",
    "lint:all": "npm run lint && npm run lint:remark && npm run lint:circular && npm run type-check:all && npm run knip",
    "lint:biome": "npx @biomejs/biome check",
    "lint:biome:fix": "npx @biomejs/biome check --fix",
    "lint:biome:write": "npx @biomejs/biome check --write",
    "lint:cache:build": "cross-env NODE_OPTIONS=--max_old_space_size=16384 eslint --cache --cache-strategy content --cache-location .cache/.eslintcache --concurrency 4",
    "lint:ci": "npm run lint:all && npm run lint:strict",
    "lint:circular": "npm run madge:circular",
    "lint:circular:electron": "npm run lint:madge:electron",
    "lint:circular:shared": "madge --circular --ts-config tsconfig.shared.json --extensions ts,mts,cts,tsx,js,jsx src/ electron/ shared/ --exclude \"(^|[\\\\/])(test|dist|dist-electron|node_modules)($|[\\\\/])\"",
    "lint:cognitive-complexity:electron": "cognitive-complexity-ts --threshold 10 electron/",
    "lint:cognitive-complexity:shared": "cognitive-complexity-ts --threshold 10 shared/",
    "lint:cognitive-complexity:src": "cognitive-complexity-ts --threshold 10 src/",
    "lint:commit": "commitlint --config config/linting/commitlint.config.mjs --from HEAD~1 --to HEAD --verbose",
    "lint:complexity": "cross-env NODE_OPTIONS=--max_old_space_size=16384 eslint --cache --cache-strategy content --cache-location .cache/.eslintcache . --ext .js,.jsx,.ts,.mts,.cts,.tsx --rule '{\"complexity\": [\"warn\", 10], \"max-lines-per-function\": [\"warn\", 50], \"max-depth\": [\"warn\", 3]}' --format @eslint/eslint-formatter-compact",
    "lint:complexity:report": "cross-env NODE_OPTIONS=--max_old_space_size=16384 eslint --cache --cache-strategy content --cache-location .cache/.eslintcache . --ext .js,.jsx,.ts,.mts,.cts,.tsx --rule '{\"complexity\": [\"warn\", 10], \"max-lines-per-function\": [\"warn\", 50], \"max-depth\": [\"warn\", 3]}' --format json --output-file complexity-report.json",
    "lint:config:build": "npm run build:eslint-inspector",
    "lint:config:inspect": "npx eslint --inspect-config",
    "lint:css": "stylelint --cache --config stylelint.config.mjs --cache-strategy content --cache-location .cache/stylelintcache src/ electron/ shared/ docs/ --custom-formatter stylelint-formatter-pretty",
    "lint:css:docs": "stylelint --cache --config ./docs/docusaurus/stylelint.config.mjs --ignore-path ./docs/docusaurus/.stylelintignore --cache-strategy content --cache-location docs/docusaurus/stylelintcache docs/docusaurus --custom-formatter stylelint-formatter-pretty",
    "lint:css:docs:fix": "stylelint --cache --config ./docs/docusaurus/stylelint.config.mjs --ignore-path ./docs/docusaurus/.stylelintignore --cache-strategy content --cache-location docs/docusaurus/stylelintcache docs/docusaurus --custom-formatter stylelint-formatter-pretty --fix",
    "lint:css:fix": "stylelint --cache --config stylelint.config.mjs --cache-strategy content --cache-location .cache/stylelintcache src/ electron/ shared/ docs/ --custom-formatter stylelint-formatter-pretty --fix",
    "lint:current": "cross-env NODE_OPTIONS=--max_old_space_size=16384 eslint --cache --cache-strategy content --cache-location .cache/.eslintcache .",
    "lint:debug": "npx cross-env TIMING=1 eslint --debug --stats",
    "lint:debug2": "npm run lint:config:inspect",
    "lint:depcheck": "depcheck",
    "lint:deps": "depcheck && npm run knip",
    "lint:dupes": "jscpd src/ electron/ shared/ --config config/linting/jscpd.json",
    "lint:dupes:all": "jscpd src/ electron/ shared/ --config config/linting/jscpd.json --min-lines 3",
    "lint:dupes:skiplocal": "jscpd src/ electron/ shared/ --skipLocal --config config/linting/jscpd.json",
    "lint:dupes:skiplocal:all": "jscpd src/ electron/ shared/ --skipLocal --config config/linting/jscpd.json --min-lines 3",
    "lint:duplicates": "npm run lint:dupes",
    "lint:eslint:inspect": "npm run lint:config:inspect",
    "lint:exports": "ts-unused-exports src/main.tsx",
    "lint:exports:electron": "ts-unused-exports electron/main.ts",
    "lint:fix": "cross-env NODE_OPTIONS=--max_old_space_size=16384 eslint --cache --cache-strategy content --cache-location .cache/.eslintcache --fix",
    "lint:format": "prettier . --cache --cache-location=.cache/.prettier-cache --check",
    "lint:format:fix": "npm run lint:format",
    "lint:github-actions:format": "cross-env NODE_OPTIONS=--max_old_space_size=16384 eslint --cache --cache-strategy content --cache-location .cache/.eslintcache --format gha",
    "lint:github-annotations:format": "cross-env NODE_OPTIONS=--max_old_space_size=16384 eslint --cache --cache-strategy content --cache-location .cache/.eslintcache --format github-annotations",
    "lint:grype": "grype . -c config/linting/.grype.yaml --name Uptime-Watcher",
    "lint:html": "cross-env NODE_OPTIONS=--max_old_space_size=16384 eslint --cache --cache-strategy content --cache-location .cache/.eslintcache \"**/*.html\" --plugin html",
    "lint:html:format": "cross-env NODE_OPTIONS=--max_old_space_size=16384 eslint --cache --cache-strategy content --cache-location .cache/.eslintcache --format html -o ESLintReport.html",
    "lint:imports": "cross-env NODE_OPTIONS=--max_old_space_size=16384 eslint --cache --cache-strategy content --cache-location .cache/.eslintcache . --ext .js,.jsx,.ts,.mts,.cts,.tsx --rule '{\"import/order\": \"error\", \"import/no-duplicates\": \"error\", \"unused-imports/no-unused-imports\": \"error\"}'",
    "lint:inspect": "npm run build:eslint-inspector",
    "lint:inspect:build": "npm run build:eslint-inspector",
    "lint:js": "cross-env NODE_OPTIONS=--max_old_space_size=16384 eslint --cache --cache-strategy content --cache-location .cache/.eslintcache \"**/*.{js,jsx}\"",
    "lint:json": "cross-env NODE_OPTIONS=--max_old_space_size=16384 eslint --cache --cache-strategy content --cache-location .cache/.eslintcache \"**/*.json\"",
    "lint:knip": "npm run knip",
    "lint:leaves": "npm run madge:leaves",
    "lint:madge": "npm run madge:circular",
    "lint:madge:circular": "npm run madge:circular",
    "lint:madge:electron": "madge --circular --ts-config tsconfig.electron.json --extensions ts,mts,cts,tsx,js,jsx src/ electron/ shared/ --exclude \"(^|[\\\\/])(test|dist|dist-electron|node_modules)($|[\\\\/])\"",
    "lint:madge:leaves": "npm run madge:leaves",
    "lint:madge:orphans": "npm run madge:orphans",
    "lint:markdown": "markdownlint --config config/linting/markdownlint.json --ignore-path config/linting/markdownlintignore \"**/*.md\"",
    "lint:markdown-links": "markdown-link-check README.md",
    "lint:markdown:fix": "markdownlint --config config/linting/markdownlint.json --ignore-path config/linting/markdownlintignore \"**/*.md\" --fix",
    "lint:markdown:format": "cross-env NODE_OPTIONS=--max_old_space_size=16384 eslint --cache --cache-strategy content --cache-location .cache/.eslintcache --format node_modules/eslint-formatter-markdown/markdown.js -o ESLintReport.md",
    "lint:md": "npm run lint:markdown",
    "lint:metrics": "npm run sloc",
    "lint:orphans": "npm run madge:orphans",
    "lint:ossf-scorecard": "npm run ossf-scorecard",
    "lint:package": "sort-package-json && npm run lint:package-check",
    "lint:package-check": "publint && attw --pack .",
    "lint:package-sort": "sort-package-json",
    "lint:package-sort-check": "sort-package-json --check",
    "lint:prettier": "prettier . --cache --cache-location=.cache/.prettier-cache --cache-strategy=content --check",
    "lint:prettier-fix": "prettier . --cache --cache-location=.cache/.prettier-cache --cache-strategy=content --write",
    "lint:pretty": "npm run lint:prettier-fix",
    "lint:pretty:format": "cross-env NODE_OPTIONS=--max_old_space_size=16384 eslint --cache --cache-strategy content --cache-location .cache/.eslintcache --format pretty",
    "lint:prettynow": "npm run lint:prettier-fix",
    "lint:publint": "publint",
    "lint:quick": "cross-env NODE_OPTIONS=--max_old_space_size=16384 npm run lint:js && npm run lint:ts && npm run lint:prettier",
    "lint:remark": "npm run remark:check",
    "lint:resolve-audit": "resolve-audit --skip-dev",
    "lint:sarif:format": "cross-env NODE_OPTIONS=--max_old_space_size=16384 eslint --cache --cache-strategy content --cache-location .cache/.eslintcache --format @microsoft/eslint-formatter-sarif -o ESLintReport.sarif",
    "lint:secrets": "detect-secrets scan",
    "lint:security": "npm run lint:security:resolve-audit && npm run lint:security:sensitive",
    "lint:security:resolve-audit": "resolve-audit --skip-dev",
    "lint:security:sensitive": "detect-secrets scan",
    "lint:sloc": "npm run sloc",
    "lint:sort-package": "npm run sort-package",
    "lint:sort-package-check": "npm run sort-package-check",
    "lint:spell": "cspell \"**/*.{js,jsx,ts,tsx,md,css,scss,json}\" --cache --cache-strategy content --color --show-suggestions --show-context --gitignore --config cspell.json",
    "lint:spell-all": "cspell . --cache --cache-strategy content --color --show-suggestions --show-context --gitignore --config cspell.json",
    "lint:spell-export": "cspell \"**/*.{js,jsx,ts,tsx,md,css,scss,json}\" --gitignore --config cspell.json --words-only --unique --no-progress",
    "lint:spell-export:fix": "npm run lint:spell:fix",
    "lint:spell:fix": "node .\\scripts\\add-cspell-words.mjs",
    "lint:stats": "npm run lint -- -f summary",
    "lint:strict": "cross-env NODE_OPTIONS=--max_old_space_size=16384 eslint --cache --cache-strategy content --cache-location .cache/.eslintcache . --ext .js,.jsx,.ts,.mts,.cts,.tsx --max-warnings 0",
    "lint:stylelint": "stylelint --cache --config stylelint.config.mjs --cache-strategy content --cache-location .cache\\stylelintcache src/ electron/ shared/ docs/ --formatter verbose",
    "lint:stylelint:actions": "stylelint --cache --config stylelint.config.mjs --cache-strategy content --cache-location .cache\\stylelintcache src/ electron/ shared/ docs/ --custom-formatter stylelint-actions-formatters",
    "lint:stylelint:checkstyle": "stylelint --cache --config stylelint.config.mjs --cache-strategy content --cache-location .cache\\stylelintcache src/ electron/ shared/ docs/ --custom-formatter stylelint-checkstyle-formatter",
    "lint:stylelint:codeframe": "stylelint --cache --config stylelint.config.mjs --cache-strategy content --cache-location .cache\\stylelintcache src/ electron/ shared/ docs/ --custom-formatter stylelint-codeframe-formatter",
    "lint:stylelint:find-new-rules": "stylelint-find-new-rules stylelint.config.mjs",
    "lint:stylelint:fix": "stylelint --cache --config stylelint.config.mjs --cache-strategy content --cache-location .cache\\stylelintcache src/ electron/ shared/ docs/ --formatter verbose --fix",
    "lint:stylelint:github": "stylelint --cache --config stylelint.config.mjs --cache-strategy content --cache-location .cache\\stylelintcache src/ electron/ shared/ docs/ --custom-formatter @csstools/stylelint-formatter-github",
    "lint:stylelint:gitlab": "stylelint --cache --config stylelint.config.mjs --cache-strategy content --cache-location .cache\\stylelintcache src/ electron/ shared/ docs/ --custom-formatter stylelint-formatter-gitlab-code-quality-report",
    "lint:stylelint:pretty": "stylelint --cache --config stylelint.config.mjs --cache-strategy content --cache-location .cache\\stylelintcache src/ electron/ shared/ docs/ --custom-formatter stylelint-formatter-pretty",
    "lint:summary": "npm run lint -- -f summary",
    "lint:summary:format": "cross-env NODE_OPTIONS=--max_old_space_size=16384 eslint --cache --cache-strategy content --cache-location .cache/.eslintcache --format node_modules/eslint-summary/summary.js",
    "lint:todo": "leasot 'src/**/*.{js,jsx,ts,tsx}' --reporter json",
    "lint:todos": "leasot 'src/**/*.{js,jsx,ts,tsx}' --reporter markdown",
    "lint:toml": "cross-env NODE_OPTIONS=--max_old_space_size=16384 eslint --cache --cache-strategy content --cache-location .cache/.eslintcache \"**/*.toml\" --parser toml-eslint-parser",
    "lint:totals": "npm run lint -- -f summary",
    "lint:ts": "cross-env NODE_OPTIONS=--max_old_space_size=16384 eslint --cache --cache-strategy content --cache-location .cache/.eslintcache \"**/*.{ts,tsx}\"",
    "lint:unused": "npm run knip -- --include unlisted,unresolved,duplicates",
    "lint:unused-deps": "depcheck --ignores='@types/*,@testing-library/*,@vitest/*'",
    "lint:unused-exports": "ts-unused-exports src/main.tsx",
    "lint:unused-exports:electron": "ts-unused-exports electron/main.ts",
    "lint:vuln": "npm run lint:vulnerability",
    "lint:vulnerability": "grype . -c config/linting/.grype.yaml --name Uptime-Watcher",
    "lint:yaml": "yamllint -c config/linting/.yamllint ./** -f colored",
    "lpf": "npm run lint:fix && npm run lint:prettynow",
    "madge:circular": "madge --circular --ts-config tsconfig.json --extensions ts,tsx,js,jsx src/ electron/ shared/ --exclude \"(^|[\\\\/])(test|dist|dist-electron|node_modules)($|[\\\\/])\"",
    "madge:leaves": "madge --leaves --ts-config tsconfig.json --extensions ts,tsx,js,jsx src/ electron/ shared/ --exclude \"(^|[\\\\/])(test|dist|dist-electron|node_modules)($|[\\\\/])\"",
    "madge:orphans": "madge --orphans --ts-config tsconfig.json --extensions ts,tsx,js,jsx src/ electron/ shared/ --exclude \"(^|[\\\\/])(test|dist|dist-electron|node_modules)($|[\\\\/])\"",
    "mutation": "stryker run",
    "mutation:debug": "stryker run --logLevel debug",
    "mutation:dry": "stryker run --dryRunOnly",
    "mutation:incremental": "stryker run --incremental",
    "mutation:verify-dashboard": "node scripts/verify-stryker-dashboard.mjs",
    "node:trace-warnings": "cross-env NODE_OPTIONS=--trace-warnings",
    "npm:trace-deprecation": "cross-env NODE_OPTIONS=--trace-deprecation",
    "npm:trace-env": "cross-env NODE_OPTIONS=--trace-env",
    "npm:trace-exit": "cross-env NODE_OPTIONS=--trace-exit",
    "npm:trace-sync-io": "cross-env NODE_OPTIONS=--trace-sync-io",
    "npm:trace-uncaught": "cross-env NODE_OPTIONS=--trace-uncaught",
    "npm:trace-unhandled-rejections": "cross-env NODE_OPTIONS=--trace-unhandled-rejections",
    "open:coverage": "open-cli coverage/index.html",
    "open:docs": "open-cli docs/index.html",
    "ossf-scorecard": "scorecard-check",
    "playwright": "playwright test --config playwright.config.ts",
    "playwright:codegen": "node scripts/codegen.mjs",
    "playwright:codegen-chrome": "node scripts/codegen.mjs --dev",
    "playwright:codegen-electron": "node scripts/codegen.mjs --electron --inspector",
    "playwright:debug": "playwright test --config playwright.config.ts --debug",
    "playwright:headed": "playwright test --config playwright.config.ts --headed",
    "playwright:install": "playwright install",
    "playwright:record": "npm run playwright:codegen-electron",
    "playwright:recorder": "npm run playwright:codegen-electron",
    "playwright:report": "playwright show-report playwright/test-results",
    "playwright:transform": "node scripts/transform-test.mjs",
    "playwright:ui": "playwright test --config playwright.config.ts --ui",
    "prebuild:off": "npm run lint && npm run type-check",
    "prestart:old": "npm run prebuild:off",
    "pretest:old": "npm run prebuild:off",
    "preview": "vite preview",
    "profile": "vite --profile",
    "profile:debug": "vite --profile --debug",
    "profile:transform": "vite --debug transform",
    "prune": "npm prune",
    "publint": "publint && attw --pack .",
    "quality": "npm run lint:all && npm run test:all:coverage",
    "quality:check": "npm run lint:ci && npm run test:all:coverage",
    "rebuild": "npm run clean && npm install && npm run build",
    "remark": "remark --rc-path .remarkrc.mjs --silently-ignore --ignore-path .remarkignore --frail",
    "remark:check": "remark --rc-path .remarkrc.mjs --silently-ignore --ignore-path .remarkignore --frail \"*.{md,mdx}\" \"docs/**/*.{md,mdx}\" \"src/**/*.{md,mdx}\" \"electron/**/*.{md,mdx}\" \"shared/**/*.{md,mdx}\"  --quiet",
    "remark:check-docs": "remark --rc-path .remarkrc.mjs --silently-ignore --ignore-path .remarkignore --frail \"docs/**/*.{md,mdx}\"",
    "remark:debug": "remark --rc-path .remarkrc.mjs --silently-ignore --ignore-path .remarkignore --frail --verbose \"README.md\"",
    "remark:debug-single": "remark --rc-path .remarkrc.mjs --silently-ignore --ignore-path .remarkignore --frail --verbose",
    "remark:fix": "remark --rc-path .remarkrc.mjs --silently-ignore --ignore-path .remarkignore --frail --output \"*.{md,mdx}\" \"docs/**/*.{md,mdx}\" \"src/**/*.{md,mdx}\" \"electron/**/*.{md,mdx}\" \"shared/**/*.{md,mdx}\" --quiet",
    "remark:format": "remark --rc-path .remarkrc.mjs --silently-ignore --ignore-path .remarkignore --frail --output \"*.{md,mdx}\" \"docs/**/*.{md,mdx}\" \"src/**/*.{md,mdx}\" \"electron/**/*.{md,mdx}\" \"shared/**/*.{md,mdx}\" --quiet",
    "remark:lint": "remark --rc-path .remarkrc.mjs --silently-ignore --ignore-path .remarkignore --frail \"*.{md,mdx}\" \"docs/**/*.{md,mdx}\" \"src/**/*.{md,mdx}\" \"electron/**/*.{md,mdx}\" \"shared/**/*.{md,mdx}\" --no-stdout",
    "remark:test-config": "remark --rc-path .remarkrc.mjs --silently-ignore --ignore-path .remarkignore --frail \"README.md\"",
    "remark:watch": "remark --rc-path .remarkrc.mjs --silently-ignore --ignore-path .remarkignore --frail --output \"*.{md,mdx}\" \"docs/**/*.{md,mdx}\" \"src/**/*.{md,mdx}\" \"electron/**/*.{md,mdx}\" \"shared/**/*.{md,mdx}\" --watch",
    "reset": "npm run clean && npm install",
    "postreset": "npm run reset && npm run postbuild",
    "resolve-audit": "resolve-audit --skip-dev",
    "scripts:docs:download:all": "npm run docs:download:all",
    "scripts:docs:download:axios": "npm run docs:download:axios",
    "scripts:docs:download:chartjs": "npm run docs:download:chartjs",
    "scripts:docs:download:electron": "npm run docs:download:electron",
    "scripts:docs:download:nodeping": "npm run docs:download:nodeping",
    "scripts:docs:download:react": "npm run docs:download:react",
    "scripts:docs:download:sqlite3": "npm run docs:download:sqlite3",
    "scripts:docs:download:sqlite3-wasm": "npm run docs:download:sqlite3-wasm",
    "scripts:docs:download:tsdoc": "npm run docs:download:tsdoc",
    "scripts:docs:download:validator": "npm run docs:download:validator",
    "scripts:docs:download:zod": "npm run docs:download:zod",
    "scripts:docs:download:zustand": "npm run docs:download:zustand",
    "scripts:fetch-tsdoc": "npm run tsdoc-update",
    "scripts:find-empty-dirs": "npm run find-empty-dirs",
    "scripts:find-empty-dirs:all": "npm run find-empty-dirs:all",
    "scripts:find-empty-dirs:all:delete": "npm run find-empty-dirs:all:delete",
    "scripts:find-empty-dirs:delete": "npm run find-empty-dirs:delete",
    "scripts:lint:spell-export:fix": "npm run lint:spell:fix",
    "scripts:lint:spell:fix": "npm run lint:spell:fix",
    "scripts:postinstall": "npm run postinstall",
    "scripts:sqlite:download-wasm": "npm run sqlite:download",
    "scripts:sqlite:verify-wasm": "npm run sqlite:verify-wasm",
    "scripts:tsdoc-update": "npm run tsdoc-update",
    "scripts:update-tsdoc": "npm run tsdoc-update",
    "scripts:validate:components": "npm run validate:components",
    "security:check": "npm audit",
    "security:fix": "npm audit fix",
    "sloc": "sloc src/ electron/ shared/",
    "sort-package": "sort-package-json && sort-package-json docs/docusaurus/package.json",
    "sort-package:check": "sort-package-json --check && sort-package-json --check docs/docusaurus/package.json",
    "sqlite:clean-wasm": "rm -f dist-electron/node-sqlite3-wasm.wasm",
    "sqlite:download": "node scripts/download-sqlite3-wasm.mjs",
    "sqlite:download-wasm": "npm run sqlite:download",
    "sqlite:download:check": "node scripts/download-sqlite3-wasm.mjs --check-update",
    "sqlite:download:force": "node scripts/download-sqlite3-wasm.mjs --force",
    "sqlite:download:skip": "node scripts/download-sqlite3-wasm.mjs --no-update",
    "sqlite:download:update": "npm run sqlite:download",
    "sqlite:reinstall-wasm": "npm run sqlite:clean-wasm && npm run sqlite:download",
    "sqlite:verify-wasm": "echo 'Verification script not implemented yet.'",
    "start": "npm run dev",
    "start-both": "npm run electron-dev",
    "start-fix": "npm run dev:with-sqlite3",
    "start:clean": "npm run clean && npm run start",
    "start:debug": "npm run debug:electron",
    "start:electron": "electron .",
    "start:prod": "npm run build && npm run start:electron",
    "start:renderer": "npm run dev",
    "start:reset": "npm run clean && npm run build && npm run start",
    "stylelint-find-rules:all": "stylelint-find-new-rules ./stylelint.config.mjs --available",
    "stylelint-find-rules:current": "stylelint-find-new-rules ./stylelint.config.mjs --current",
    "stylelint-find-rules:deprecated": "stylelint-find-new-rules ./stylelint.config.mjs --deprecated",
    "stylelint-find-rules:invalid": "stylelint-find-new-rules ./stylelint.config.mjs --invalid",
    "stylelint-find-rules:unused": "stylelint-find-new-rules ./stylelint.config.mjs --unused",
    "stylelint:clear-cache": "rimraf .cache/stylelintcache",
    "test": "vitest run --reporter=dot --silent",
    "test-enhance:metadata": "node scripts/enhance-test-metadata.mjs",
    "test-enhance:metadata:dry": "node scripts/enhance-test-metadata.mjs --dry-run",
    "test-enhance:metadata:force": "node scripts/enhance-test-metadata.mjs --force",
    "test-fix:quotes": "node scripts/fix-test-quotes.mjs",
    "test-fix:quotes:dry": "node scripts/fix-test-quotes.mjs --dry-run",
    "test:all": "npm run test && npm run test:electron && npm run test:shared",
    "test:all:coverage": "npm run test:coverage && npm run test:electron:coverage && npm run test:shared:coverage",
    "test:all:detailed": "npm run test:detailed && npm run test:electron:detailed && npm run test:shared:detailed",
    "test:all:minimal": "npm run test:minimal && npm run test:electron:minimal && npm run test:shared:minimal",
    "test:all:quiet": "npm run test:quiet && npm run test:electron:quiet && npm run test:shared:quiet",
    "test:all:verbose": "npm run test:verbose && npm run test:electron:verbose && npm run test:shared:verbose",
    "test:bail": "vitest --bail 50",
    "test:coverage": "vitest run --coverage --reporter=default",
    "test:coverage:detailed": "vitest run --coverage --reporter=verbose --no-truncate",
    "test:coverage:minimal": "vitest run --coverage --reporter=dot",
    "test:coverage:open": "npm run test:coverage && npm run open:coverage",
    "test:coverage:quiet": "vitest run --coverage --reporter=default --silent",
    "test:coverage:verbose": "vitest run --coverage --reporter=verbose",
    "test:debug": "vitest run --debug",
    "test:debug:coverage": "vitest run --coverage --debug",
    "test:debug:ui": "vitest --ui --debug",
    "test:debug:watch": "vitest --watch --debug",
    "test:default": "vitest run",
    "test:detailed": "vitest run --reporter=verbose --no-truncate",
    "test:docs": "vitest run scripts/tests/unit/platform-presets.test.mjs scripts/tests/unit/language-support.test.mjs scripts/tests/integration/cli-integration.test.mjs --config scripts/tests/vitest.config.mjs --reporter=default",
    "test:docs:detailed": "vitest run scripts/tests/unit/platform-presets.test.mjs scripts/tests/unit/language-support.test.mjs scripts/tests/integration/cli-integration.test.mjs --config scripts/tests/vitest.config.mjs --reporter=verbose --no-truncate",
    "test:docs:minimal": "vitest run scripts/tests/unit/platform-presets.test.mjs scripts/tests/unit/language-support.test.mjs scripts/tests/integration/cli-integration.test.mjs --config scripts/tests/vitest.config.mjs --reporter=dot",
    "test:docs:quiet": "vitest run scripts/tests/unit/platform-presets.test.mjs scripts/tests/unit/language-support.test.mjs scripts/tests/integration/cli-integration.test.mjs --config scripts/tests/vitest.config.mjs --reporter=default --silent",
    "test:docs:verbose": "vitest run scripts/tests/unit/platform-presets.test.mjs scripts/tests/unit/language-support.test.mjs scripts/tests/integration/cli-integration.test.mjs --config scripts/tests/vitest.config.mjs --reporter=verbose",
    "test:e2e": "npm run playwright",
    "test:e2e:debug": "npm run playwright:debug",
    "test:e2e:headed": "npm run playwright:headed",
    "test:e2e:ui": "npm run playwright:ui",
    "test:electron": "vitest run --config vitest.electron.config.ts --reporter=dot --silent",
    "test:electron:coverage": "vitest run --config vitest.electron.config.ts --coverage",
    "test:electron:detailed": "vitest run --config vitest.electron.config.ts --reporter=verbose --no-truncate",
    "test:electron:minimal": "vitest run --config vitest.electron.config.ts --reporter=dot",
    "test:electron:quiet": "vitest run --config vitest.electron.config.ts --reporter=default --silent",
    "test:electron:ui": "vitest --config vitest.electron.config.ts --ui",
    "test:electron:verbose": "vitest run --config vitest.electron.config.ts --reporter=verbose",
    "test:frontend": "vitest run --config vitest.config.ts --reporter=dot --silent",
    "test:fuzz": "npm run fuzz",
    "test:fuzzing": "npm run fuzz",
    "test:hanging": "npx vitest run --reporter=hanging-process",
    "test:minimal": "vitest run --reporter=dot",
    "test:playwright": "npm run playwright",
    "test:quiet": "vitest run --reporter=default --silent",
    "test:run": "vitest run --reporter=default",
    "test:run:bail": "vitest run --bail 50 --reporter=default",
    "test:run:detailed": "npm run test:detailed",
    "test:run:minimal": "npm run test:minimal",
    "test:run:quiet": "npm run test:quiet",
    "test:run:verbose": "npm run test:verbose",
    "test:run:watch": "vitest run --watch --reporter=default",
    "test:shared": "vitest run --config vitest.shared.config.ts --reporter=dot --silent",
    "test:shared:coverage": "vitest run --config vitest.shared.config.ts --coverage",
    "test:shared:detailed": "vitest run --config vitest.shared.config.ts --reporter=verbose --no-truncate",
    "test:shared:minimal": "vitest run --config vitest.shared.config.ts --reporter=dot",
    "test:shared:quiet": "vitest run --config vitest.shared.config.ts --reporter=default --silent",
    "test:shared:ui": "vitest --config vitest.shared.config.ts --ui",
    "test:shared:verbose": "vitest run --config vitest.shared.config.ts --reporter=verbose",
    "test:ui": "vitest run --ui",
    "test:verbose": "vitest run --reporter=verbose",
    "test:watch": "vitest run --watch",
    "test:watch:electron": "vitest run --config vitest.electron.config.ts --watch",
    "test:watch:frontend": "vitest run --config vitest.config.ts --watch",
    "test:watch:shared": "vitest run --config vitest.shared.config.ts --watch",
    "tsdoc-update": "node scripts/download-tsdoc-tags.mjs",
    "tsg:graph:electron": "tsg --TB --config tsconfig.electron.json",
    "tsg:graph:src": "tsg --TB --config tsconfig.json",
    "tsg:graph:stats": "tsg --TB --metrics --measure-instability",
    "type-check": "npm run check-types",
    "type-check:all": "npm run check:all",
    "type-check:electron": "npm run check:electron",
    "type-check:playwright": "npm run check:playwright",
    "type-check:scripts": "tsc --build config/testing/tsconfig.scripts.json",
    "type-check:shared": "npm run check:shared",
    "type-check:src": "npm run check:frontend",
    "type-check:test": "npm run check:all:test",
    "typecheck": "npm run check-types",
    "typecheck:all": "npm run check:all",
    "typecheck:electron": "npm run check:electron",
    "typecheck:scripts": "npm run type-check:scripts",
    "typecheck:shared": "npm run check:shared",
    "typecheck:src": "npm run check:frontend",
    "typecheck:test": "npm run check:all:test",
    "update-tsdoc": "npm run tsdoc-update",
    "updateDeps": "npx ncu -i && npx ncu -i --packageFile docs/docusaurus/package.json && npm install --force && cd docs/docusaurus && npm install --force",
    "validate:components": "node scripts/validate-components.mjs"
  },
  "eslintConfig": {
    "extends": "eslint.config.mjs"
  },
  "overrides": {
    "@codecov/vite-plugin": {
      "vite": "$vite"
    },
    "@react-scan/vite-plugin-react-scan": {
      "react-scan": "$react-scan",
      "vite": "$vite"
    },
    "@typescript-eslint/eslint-plugin": {
      "eslint": "$eslint"
    },
    "@typescript-eslint/experimental-utils": {
      "eslint": "$eslint"
    },
    "@typescript-eslint/parser": {
      "eslint": "$eslint"
    },
    "*": {
      "vite": "$vite",
      "eslint": "$eslint",
      "@typescript-eslint/parser": "$@typescript-eslint/parser",
      "@typescript-eslint/utils": "$@typescript-eslint/utils",
      "prettier": "$prettier",
      "stylelint": "$stylelint",
      "typescript": "$typescript",
      "tsx": "$tsx",
      "typedoc": "$typedoc",
      "vitest": "$vitest",
      "@typescript-eslint/eslint-plugin": "$@typescript-eslint/eslint-plugin"
    },
    "eslint-etc": {
      "eslint": "$eslint"
    },
    "eslint-plugin-deprecation": {
      "eslint": "$eslint"
    },
    "eslint-plugin-etc": {
      "eslint": "$eslint"
    },
    "eslint-plugin-fsecond": {
      "@typescript-eslint/parser": {
        "eslint": "$eslint"
      },
      "@typescript-eslint/utils": {
        "eslint": "$eslint"
      },
      "eslint": "$eslint"
    },
    "eslint-plugin-istanbul": {
      "eslint": "$eslint"
    },
    "eslint-plugin-no-lookahead-lookbehind-regexp": {
      "eslint": "$eslint"
    },
    "eslint-plugin-react-form-fields": {
      "@typescript-eslint/experimental-utils": {
        "eslint": "$eslint"
      },
      "eslint": "$eslint"
    },
    "eslint-plugin-safe-jsx": {
      "eslint": "$eslint"
    },
    "eslint-plugin-total-functions": {
      "eslint": "$eslint"
    },
    "eslint-plugin-usememo-recommendations": {
      "@typescript-eslint/utils": {
        "eslint": "$eslint"
      },
      "eslint": "$eslint"
    },
    "is-immutable-type": {
      "eslint": "$eslint"
    },
    "stylelint-config-standard-scss": {
      "stylelint": "$stylelint"
    },
    "stylelint-group-selectors": {
      "stylelint": "$stylelint"
    },
    "stylelint-high-performance-animation": {
      "stylelint": "$stylelint"
    },
    "vite": {
      "tsx": "$tsx"
    },
    "zod-fast-check": {
      "fast-check": "$fast-check",
      "zod": "$zod"
    }
  },
  "dependencies": {
    "@shared/constants": "file:./shared/constants",
    "@shared/types": "file:./shared/types",
    "@shared/utils": "file:./shared/utils",
    "@shared/validation": "file:./shared/validation",
    "axios": "^1.12.2",
    "chart.js": "^4.5.0",
    "chartjs-adapter-date-fns": "^3.0.0",
    "chartjs-plugin-zoom": "^2.2.0",
    "electron-debug": "^4.1.0",
    "electron-log": "^5.4.3",
    "electron-updater": "^6.6.2",
    "is-port-reachable": "^4.0.0",
    "node-sqlite3-wasm": "^0.8.49",
    "react": "^19.1.1",
    "react-chartjs-2": "^5.3.0",
    "react-dom": "^19.1.1",
    "react-icons": "^5.5.0",
    "type-fest": "^5.0.1",
    "validator": "^13.15.15",
    "zod": "^4.1.11",
    "zustand": "^5.0.8"
  },
  "devDependencies": {
    "@arethetypeswrong/cli": "^0.18.2",
    "@arthurgeron/eslint-plugin-react-usememo": "^2.5.0",
    "@awmottaz/prettier-plugin-void-html": "^1.9.0",
    "@biomejs/biome": "2.2.4",
    "@codecov/vite-plugin": "^1.9.1",
    "@commitlint/cli": "^19.8.1",
    "@commitlint/config-conventional": "^19.8.1",
    "@commitlint/prompt": "^19.8.1",
    "@commitlint/prompt-cli": "^19.8.1",
    "@commitlint/types": "^19.8.1",
    "@cspell/cspell-bundled-dicts": "^9.2.1",
    "@cspell/cspell-types": "^9.2.1",
    "@csstools/stylelint-formatter-github": "^1.0.0",
    "@docusaurus/eslint-plugin": "^3.8.1",
    "@double-great/stylelint-a11y": "^3.4.0",
    "@dword-design/eslint-plugin-import-alias": "^6.0.3",
    "@electron/notarize": "^3.1.0",
    "@eslint-community/eslint-plugin-eslint-comments": "^4.5.0",
    "@eslint-react/eslint-plugin": "^1.53.1",
    "@eslint/compat": "^1.4.0",
    "@eslint/css": "^0.11.1",
    "@eslint/eslintrc": "^3.3.1",
    "@eslint/js": "^9.36.0",
    "@eslint/json": "^0.13.2",
    "@eslint/markdown": "^7.3.0",
    "@eslint/mcp": "^0.1.1",
    "@executeautomation/database-server": "^1.1.0",
    "@fast-check/vitest": "^0.2.2",
    "@html-eslint/eslint-plugin": "^0.46.2",
    "@html-eslint/parser": "^0.46.2",
    "@jcoreio/eslint-plugin-implicit-dependencies": "^1.2.0",
    "@jscpd/badge-reporter": "^4.0.1",
    "@metamask/eslint-plugin-design-tokens": "^1.1.1",
    "@microsoft/eslint-formatter-sarif": "^3.1.0",
    "@microsoft/eslint-plugin-sdl": "^1.1.0",
    "@microsoft/tsdoc-config": "^0.17.1",
    "@modelcontextprotocol/server-sequential-thinking": "^2025.7.1",
    "@playwright/test": "^1.55.1",
    "@putout/eslint": "^4.1.0",
    "@putout/eslint-flat": "^3.0.1",
    "@react-scan/vite-plugin-react-scan": "^0.1.8",
    "@rushstack/eslint-plugin-security": "^0.11.0",
    "@secretlint/secretlint-rule-no-dotenv": "^11.2.4",
    "@secretlint/secretlint-rule-no-homedir": "^11.2.4",
    "@secretlint/secretlint-rule-pattern": "^11.2.4",
    "@secretlint/secretlint-rule-preset-recommend": "^11.2.4",
    "@secretlint/secretlint-rule-secp256k1-privatekey": "^11.2.4",
    "@stryker-mutator/api": "^9.1.1",
    "@stryker-mutator/core": "^9.1.1",
    "@stryker-mutator/typescript-checker": "^9.1.1",
    "@stryker-mutator/vitest-runner": "^9.1.1",
    "@styled/typescript-styled-plugin": "^1.0.1",
    "@stylistic/eslint-plugin": "^5.4.0",
    "@stylistic/stylelint-plugin": "^4.0.0",
    "@tailwindcss/forms": "^0.5.10",
    "@tailwindcss/postcss": "^4.1.13",
    "@tailwindcss/typography": "^0.5.18",
    "@testing-library/dom": "^10.4.1",
    "@testing-library/jest-dom": "^6.8.0",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^14.6.1",
    "@types/async": "^3.2.25",
    "@types/babel__core": "^7.20.5",
    "@types/cssnano": "^5.1.3",
    "@types/eslint": "^9.6.1",
    "@types/eslint-plugin-jsx-a11y": "^6.10.0",
    "@types/eslint-plugin-prettier": "^3.1.3",
    "@types/eslint-plugin-react-refresh": "^0.4.0",
    "@types/eslint-plugin-security": "^3.0.0",
    "@types/eslint-plugin-tailwindcss": "^3.17.0",
    "@types/fs-extra": "^11.0.4",
    "@types/jsdom": "^21.1.7",
    "@types/json-schema": "^7.0.15",
    "@types/madge": "^5.0.3",
    "@types/mocha": "^10.0.10",
    "@types/node": "^24.5.2",
    "@types/postcss-flexbugs-fixes": "^5.0.3",
    "@types/postcss-import": "^14.0.3",
    "@types/postcss-normalize": "^9.0.4",
    "@types/prop-types": "^15.7.15",
    "@types/react": "^19.1.13",
    "@types/react-dom": "^19.1.9",
    "@types/react-refresh": "^0.14.6",
    "@types/semver": "^7.7.1",
    "@types/sqlite3": "^5.1.0",
    "@types/trusted-types": "^2.0.7",
    "@types/validator": "^13.15.3",
    "@types/wait-on": "^5.3.4",
    "@types/webpack": "^5.28.5",
    "@typescript-eslint/eslint-plugin": "^8.44.1",
    "@typescript-eslint/parser": "^8.44.1",
    "@typescript-eslint/types": "^8.44.1",
    "@vitejs/plugin-react": "^5.0.3",
    "@vitest/coverage-istanbul": "^3.2.4",
    "@vitest/coverage-v8": "^3.2.4",
    "@vitest/eslint-plugin": "^1.3.12",
    "@vitest/snapshot": "^3.2.4",
    "@vitest/ui": "^3.2.4",
    "async": "^3.2.6",
    "autoprefixer": "^10.4.21",
    "canvas": "^3.2.0",
    "cli-table3": "^0.6.5",
    "cognitive-complexity-ts": "^0.6.5",
    "concurrently": "^9.2.1",
    "cpy-cli": "^6.0.0",
    "cross-env": "^10.0.0",
    "cspell": "^9.2.1",
    "cssnano": "^7.1.1",
    "cssnano-preset-advanced": "^7.0.9",
    "depcheck": "^1.4.7",
    "docusaurus-plugin-typedoc": "^1.4.2",
    "electron": "^38.1.2",
    "electron-builder": "^26.0.12",
    "electron-builder-squirrel-windows": "^26.0.12",
    "electron-devtools-installer": "^4.0.0",
    "electron-publish": "^26.0.11",
    "eslint": "^9.36.0",
    "eslint-config-flat-gitignore": "^2.1.0",
    "eslint-config-prettier": "^10.1.8",
    "eslint-formatter-badger": "^0.10.0",
    "eslint-formatter-compact": "^8.40.0",
    "eslint-formatter-gha": "^1.6.0",
    "eslint-formatter-github-annotations": "^0.1.0",
    "eslint-formatter-html": "^2.7.3",
    "eslint-formatter-markdown": "^1.0.4",
    "eslint-formatter-pretty": "^7.0.0",
    "eslint-formatter-summary": "^2.0.2",
    "eslint-formatter-summary-chart": "^0.3.0",
    "eslint-import-resolver-typescript": "^4.4.4",
    "eslint-mdx": "^3.6.2",
    "eslint-plugin-antfu": "^3.1.1",
    "eslint-plugin-array-func": "^5.0.2",
    "eslint-plugin-better-tailwindcss": "^3.7.9",
    "eslint-plugin-boundaries": "^5.0.1",
    "eslint-plugin-canonical": "^5.1.3",
    "eslint-plugin-clean-code": "^0.1.12",
    "eslint-plugin-clean-timer": "^1.0.2",
    "eslint-plugin-comment-length": "^2.2.2",
    "eslint-plugin-compat": "^6.0.2",
    "eslint-plugin-css": "^0.11.0",
    "eslint-plugin-css-modules": "^2.12.0",
    "eslint-plugin-depend": "^1.3.1",
    "eslint-plugin-deprecation": "^3.0.0",
    "eslint-plugin-es-x": "^9.1.0",
    "eslint-plugin-eslint-comments": "^3.2.0",
    "eslint-plugin-etc": "^2.0.3",
    "eslint-plugin-exception-handling": "^1.5.4",
    "eslint-plugin-file-progress": "^3.0.2",
    "eslint-plugin-filename-export": "^2.0.0",
    "eslint-plugin-format-sql": "^1.1.1",
    "eslint-plugin-fsecond": "^1.3.0",
    "eslint-plugin-function-name": "^2.0.5",
    "eslint-plugin-functional": "^9.0.2",
    "eslint-plugin-goodeffects": "^1.0.2",
    "eslint-plugin-granular-selectors": "^1.4.0",
    "eslint-plugin-html": "^8.1.3",
    "eslint-plugin-import-x": "^4.16.1",
    "eslint-plugin-import-zod": "^1.2.0",
    "eslint-plugin-istanbul": "^0.1.2",
    "eslint-plugin-json-schema-validator": "^5.4.1",
    "eslint-plugin-jsonc": "^2.20.1",
    "eslint-plugin-jsx-a11y": "^6.10.2",
    "eslint-plugin-jsx-plus": "^0.1.0",
    "eslint-plugin-listeners": "^1.5.1",
    "eslint-plugin-loadable-imports": "^1.0.1",
    "eslint-plugin-math": "^0.13.0",
    "eslint-plugin-mdx": "^3.6.2",
    "eslint-plugin-module-interop": "^0.3.1",
    "eslint-plugin-n": "^17.23.1",
    "eslint-plugin-neverthrow": "^1.1.4",
    "eslint-plugin-nitpick": "^0.12.0",
    "eslint-plugin-no-barrel-files": "^1.2.2",
    "eslint-plugin-no-constructor-bind": "^2.0.4",
    "eslint-plugin-no-explicit-type-exports": "^0.12.1",
    "eslint-plugin-no-function-declare-after-return": "^1.1.0",
    "eslint-plugin-no-hardcoded-strings": "^1.0.0",
    "eslint-plugin-no-lookahead-lookbehind-regexp": "^0.4.0",
    "eslint-plugin-no-only-tests": "^3.3.0",
    "eslint-plugin-no-secrets": "^2.2.1",
    "eslint-plugin-no-unary-plus": "^0.3.1",
    "eslint-plugin-no-unawaited-dot-catch-throw": "^0.1.1",
    "eslint-plugin-no-unsanitized": "^4.1.4",
    "eslint-plugin-no-use-extend-native": "^0.7.2",
    "eslint-plugin-node-dependencies": "^1.1.2",
    "eslint-plugin-observers": "^1.0.1",
    "eslint-plugin-package-json": "^0.56.3",
    "eslint-plugin-paths": "^1.1.0",
    "eslint-plugin-perfectionist": "^4.15.0",
    "eslint-plugin-playwright": "^2.2.2",
    "eslint-plugin-prefer-arrow": "^1.2.3",
    "eslint-plugin-prettier": "^5.5.4",
    "eslint-plugin-promise": "^7.2.1",
    "eslint-plugin-publint": "^0.3.3",
    "eslint-plugin-putout": "^28.0.5",
    "eslint-plugin-react": "^7.37.5",
    "eslint-plugin-react-compiler": "^19.1.0-rc.2",
    "eslint-plugin-react-dom": "^1.53.1",
    "eslint-plugin-react-form-fields": "^1.2.22",
    "eslint-plugin-react-hook-form": "^0.3.1",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-hooks-addons": "^0.5.0",
    "eslint-plugin-react-hooks-extra": "^1.53.1",
    "eslint-plugin-react-naming-convention": "^1.53.1",
    "eslint-plugin-react-perf": "^3.3.3",
    "eslint-plugin-react-prefer-function-component": "^4.0.1",
    "eslint-plugin-react-refresh": "^0.4.21",
    "eslint-plugin-react-require-testid": "^1.0.4",
    "eslint-plugin-react-useeffect": "^1.0.12",
    "eslint-plugin-react-web-api": "^1.53.1",
    "eslint-plugin-redos": "^4.5.0",
    "eslint-plugin-regexp": "^2.10.0",
    "eslint-plugin-require-jsdoc": "^1.0.4",
    "eslint-plugin-safe-jsx": "^1.1.1",
    "eslint-plugin-security": "^3.0.1",
    "eslint-plugin-sonarjs": "^3.0.5",
    "eslint-plugin-sort-class-members": "^1.21.0",
    "eslint-plugin-sort-destructure-keys": "^2.0.0",
    "eslint-plugin-sort-keys-fix": "^1.1.2",
    "eslint-plugin-sort-react-dependency-arrays": "^1.0.0",
    "eslint-plugin-sql-template": "^3.1.0",
    "eslint-plugin-ssr-friendly": "^1.3.0",
    "eslint-plugin-styled-components-a11y": "^2.2.1",
    "eslint-plugin-switch-case": "^3.0.1",
    "eslint-plugin-tailwindcss": "^4.0.0-beta.0",
    "eslint-plugin-testing-library": "^7.9.1",
    "eslint-plugin-toml": "^0.12.0",
    "eslint-plugin-toplevel": "^1.2.0",
    "eslint-plugin-total-functions": "^7.1.0",
    "eslint-plugin-tree-shaking": "^1.12.2",
    "eslint-plugin-tsdoc": "^0.4.0",
    "eslint-plugin-undefined-css-classes": "^0.1.4",
    "eslint-plugin-unicorn": "^61.0.2",
    "eslint-plugin-unused-imports": "^4.2.0",
    "eslint-plugin-usememo-recommendations": "^1.0.2",
    "eslint-plugin-validate-jsx-nesting": "^0.1.1",
    "eslint-plugin-write-good-comments": "^0.2.0",
    "eslint-plugin-xss": "^0.1.12",
    "eslint-plugin-yml": "^1.18.0",
    "eslint-plugin-zod": "^1.4.0",
    "eslint-summary": "^1.0.0",
    "fast-check": "^4.3.0",
    "force": "^0.0.3",
    "fs-extra": "^11.3.2",
    "git-cliff": "^2.10.1",
    "globals": "^16.4.0",
    "globals-vitest": "^3.2.4",
    "jiti": "^2.6.0",
    "jscpd": "^4.0.5",
    "jsdom": "^27.0.0",
    "jsonc-eslint-parser": "^2.4.1",
    "knip": "^5.64.0",
    "lcov-result-merger": "^5.0.1",
    "leasot": "^14.4.0",
    "madge": "^8.0.0",
    "markdown-link-check": "^3.13.7",
    "markdownlint": "^0.38.0",
    "msw": "^2.11.3",
    "nyc": "^17.1.0",
    "picocolors": "^1.1.1",
    "pkg-types": "^2.3.0",
    "postcss": "^8.5.6",
    "postcss-assets": "^6.0.0",
    "postcss-clamp": "^4.1.0",
    "postcss-combine-duplicated-selectors": "^10.0.3",
    "postcss-flexbugs-fixes": "^5.0.2",
    "postcss-html": "^1.8.0",
    "postcss-import": "^16.1.1",
    "postcss-inline-svg": "^6.0.0",
    "postcss-logical": "^8.1.0",
    "postcss-normalize": "^13.0.1",
    "postcss-reporter": "^7.1.0",
    "postcss-round-subpixels": "^2.0.0",
    "postcss-scss": "^4.0.9",
    "postcss-sort-media-queries": "^5.2.0",
    "postcss-styled-jsx": "^1.0.1",
    "postcss-styled-syntax": "^0.7.1",
    "postcss-viewport-height-correction": "^1.1.1",
    "prettier": "^3.6.2",
    "prettier-eslint": "^16.4.2",
    "prettier-plugin-ini": "^1.3.0",
    "prettier-plugin-interpolated-html-tags": "^2.0.1",
    "prettier-plugin-jsdoc": "^1.3.3",
    "prettier-plugin-merge": "^0.8.0",
    "prettier-plugin-multiline-arrays": "^4.0.3",
    "prettier-plugin-packagejson": "^2.5.19",
    "prettier-plugin-properties": "^0.3.0",
    "prettier-plugin-sort-json": "^4.1.1",
    "prettier-plugin-sql": "^0.19.2",
    "prettier-plugin-tailwindcss": "^0.6.14",
    "publint": "^0.3.13",
    "putout": "^40.9.0",
    "react-refresh": "^0.17.0",
    "react-scan": "^0.4.3",
    "remark-cli": "^12.0.1",
    "remark-gfm": "^4.0.1",
    "remark-github": "^12.0.0",
    "remark-lint": "^10.0.1",
    "remark-lint-final-newline": "^3.0.1",
    "remark-lint-frontmatter-schema": "^3.15.4",
    "remark-lint-hard-break-spaces": "^4.1.1",
    "remark-lint-heading-capitalization": "^1.3.0",
    "remark-lint-mdx-jsx-quote-style": "^1.0.1",
    "remark-lint-mdx-jsx-self-close": "^1.0.1",
    "remark-lint-no-dead-urls": "^2.0.1",
    "remark-lint-no-tabs": "^4.0.1",
    "remark-mdx": "^3.1.1",
    "remark-preset-lint-consistent": "^6.0.1",
    "remark-preset-lint-markdown-style-guide": "^6.0.1",
    "remark-preset-lint-recommended": "^7.0.1",
    "remark-preset-prettier": "^2.0.2",
    "rollup-plugin-visualizer": "^6.0.3",
    "secretlint": "^11.2.4",
    "sort-package-json": "^3.4.0",
    "stylelint": "^16.24.0",
    "stylelint-actions-formatters": "^16.3.1",
    "stylelint-checkstyle-formatter": "^0.1.2",
    "stylelint-codeframe-formatter": "^1.2.0",
    "stylelint-config-alphabetical-order": "^1.0.0",
    "stylelint-config-idiomatic-order": "^10.0.0",
    "stylelint-config-recess-order": "^7.3.0",
    "stylelint-config-recommended": "^17.0.0",
    "stylelint-config-sass-guidelines": "^12.1.0",
    "stylelint-config-standard": "^39.0.0",
    "stylelint-config-standard-scss": "^16.0.0",
    "stylelint-config-tailwindcss": "^1.0.0",
    "stylelint-declaration-block-no-ignored-properties": "^2.8.0",
    "stylelint-declaration-strict-value": "^1.10.11",
    "stylelint-define-config": "^16.24.0",
    "stylelint-find-new-rules": "^5.0.0",
    "stylelint-formatter-gitlab-code-quality-report": "^1.1.0",
    "stylelint-formatter-pretty": "^4.0.1",
    "stylelint-gamut": "^1.3.4",
    "stylelint-group-selectors": "^1.0.10",
    "stylelint-high-performance-animation": "^1.11.0",
    "stylelint-media-use-custom-media": "^4.0.0",
    "stylelint-no-browser-hacks": "^2.0.0",
    "stylelint-no-indistinguishable-colors": "^2.3.1",
    "stylelint-no-restricted-syntax": "^2.2.1",
    "stylelint-no-unresolved-module": "^2.4.0",
    "stylelint-no-unsupported-browser-features": "^8.0.4",
    "stylelint-order": "^7.0.0",
    "stylelint-plugin-defensive-css": "^1.0.4",
    "stylelint-plugin-logical-css": "^1.2.3",
    "stylelint-plugin-use-baseline": "^1.0.0",
    "stylelint-prettier": "^5.0.3",
    "stylelint-react-native": "^2.7.0",
    "stylelint-scales": "^5.0.0",
    "stylelint-selector-bem-pattern": "^4.0.1",
    "stylelint-use-nesting": "^6.0.0",
    "stylelint-value-no-unknown-custom-properties": "^6.0.1",
    "tailwind-csstree": "^0.1.4",
    "tailwind-scrollbar-hide": "^4.0.0",
    "tailwindcss": "^4.1.13",
    "tidy-markdown": "^2.0.5",
    "toml-eslint-parser": "^0.10.0",
    "ts-morph": "^27.0.0",
    "ts-morph-helpers": "^0.6.3",
    "ts-unused-exports": "^11.0.1",
    "tslib": "^2.8.1",
    "tsx": "^4.20.5",
    "tw-animate-css": "^1.3.8",
    "typedoc": "^0.28.13",
    "typedoc-plugin-coverage": "^4.0.1",
    "typedoc-plugin-dt-links": "^2.0.20",
    "typedoc-plugin-external-package-links": "^0.1.0",
    "typedoc-plugin-markdown": "^4.9.0",
    "typedoc-plugin-mdn-links": "^5.0.9",
    "typedoc-plugin-missing-exports": "^4.1.0",
    "typedoc-plugin-remark": "^2.0.1",
    "typedoc-plugin-rename-defaults": "^0.7.3",
    "typedoc-plugin-replace-text": "^4.2.0",
    "typedoc-plugin-zod": "^1.4.2",
    "typescript": "^5.9.2",
    "typescript-eslint": "^8.44.1",
    "typescript-eslint-language-service": "^5.0.5",
    "typestat": "^0.8.18",
    "vite": "^7.1.7",
    "vite-bundle-analyzer": "^1.2.3",
    "vite-bundle-visualizer": "^1.2.1",
    "vite-css-modules": "^1.10.0",
    "vite-plugin-checker": "^0.10.3",
    "vite-plugin-devtools-json": "^1.0.0",
    "vite-plugin-electron": "^0.29.0",
    "vite-plugin-istanbul": "^7.2.0",
    "vite-plugin-mcp": "^0.2.4",
    "vite-plugin-package-version": "^1.1.0",
    "vite-plugin-static-copy": "^3.1.2",
    "vitest": "^3.2.4",
    "wait-on": "^9.0.1",
    "yaml-eslint-parser": "^1.3.0",
    "zod-fast-check": "^0.10.1"
  },
  "peerDependencies": {
    "react-scan": "^0.4.3"
  },
  "bundleDependencies": [
    "@shared/types",
    "@shared/utils",
    "@shared/validation"
  ],
  "packageManager": "npm@11.6.0",
  "engines": {
    "node": ">=24.8.0"
  },
  "os": [
    "windows",
    "linux",
    "mac",
    "macOS",
    "win64",
    "win64-exe",
    "win64-squirrel",
    "win64-msi",
    "win64-zip",
    "win64-7z",
    "win64-nsis",
    "win64-nsis-web",
    "win64-portable",
    "win64-tar.bz2",
    "win64-tar.gz",
    "win64-tar.xz",
    "win32",
    "win32-exe",
    "win32-squirrel",
    "win32-msi",
    "win32-zip",
    "win32-7z",
    "win32-nsis",
    "win32-nsis-web",
    "win32-portable",
    "win32-tar.bz2",
    "win32-tar.gz",
    "win32-tar.xz",
    "mac-x64-dmg",
    "mac-x64-pkg",
    "mac-x64-tar.xz",
    "mac-x64-tar.gz",
    "mac-x64-tar.bz2",
    "mac-arm64-dmg",
    "mac-arm64-pkg",
    "mac-arm64-tar.xz",
    "mac-arm64-tar.gz",
    "mac-arm64-tar.bz2",
    "darwin",
    "freebsd",
    "apk",
    "pacman",
    "deb",
    "rpm",
    "snap"
  ],
  "icon": "icons/favicon.ico",
  "appid": "io.github.uptime-watcher",
  "build": {
    "icon": "icons/favicon.ico",
    "appId": "io.github.uptime-watcher",
    "artifactName": "Uptime-Watcher-${platform}-${arch}-${version}.${ext}",
    "asar": true,
    "publish": [
      {
        "provider": "github",
        "owner": "Nick2bad4u",
        "repo": "Uptime-Watcher"
      }
    ],
    "productName": "Uptime-Watcher",
    "directories": {
      "output": "dist"
    },
    "files": [
      "dist-electron/**/*",
      "dist-shared/**/*",
      "dist/**/*",
      "node_modules/**/*",
      "!node_modules/@tailwindcss/oxide-*",
      "!node_modules/@tailwindcss/oxide-*/**",
      "!dist/mac-universal-*",
      "!dist/*.app",
      "!dist/*.dmg",
      "!dist/*.zip"
    ],
    "win": {
      "icon": "icons/favicon-256x256.ico",
      "target": [
        "nsis",
        "nsis-web",
        "zip",
        "7z",
        "portable",
        "squirrel",
        "msi",
        "tar.xz",
        "tar.gz",
        "tar.bz2"
      ],
      "legalTrademarks": "Uptime Watcher",
      "requestedExecutionLevel": "asInvoker"
    },
    "nsis": {
      "oneClick": false,
      "allowElevation": true,
      "allowToChangeInstallationDirectory": true,
      "createDesktopShortcut": true,
      "createStartMenuShortcut": true,
      "runAfterFinish": true,
      "artifactName": "Uptime-Watcher-nsis-${arch}-${version}.${ext}"
    },
    "nsisWeb": {
      "artifactName": "Uptime-Watcher-nsis-web-${arch}-${version}.${ext}"
    },
    "portable": {
      "artifactName": "Uptime-Watcher-portable-${arch}-${version}.${ext}"
    },
    "squirrelWindows": {
      "artifactName": "Uptime-Watcher-squirrel-${arch}-${version}.${ext}"
    },
    "msi": {
      "artifactName": "Uptime-Watcher-msi-${arch}-${version}.${ext}"
    },
    "appImage": {
      "artifactName": "Uptime-Watcher-appimage-${arch}-${version}.${ext}"
    },
    "deb": {
      "artifactName": "Uptime-Watcher-deb-${arch}-${version}.${ext}"
    },
    "rpm": {
      "artifactName": "Uptime-Watcher-rpm-${arch}-${version}.${ext}"
    },
    "snap": {
      "artifactName": "Uptime-Watcher-snap-${arch}-${version}.${ext}"
    },
    "freebsd": {
      "artifactName": "Uptime-Watcher-freebsd-${arch}-${version}.${ext}"
    },
    "pacman": {
      "artifactName": "Uptime-Watcher-pacman-${arch}-${version}.${ext}"
    },
    "p5p": {
      "artifactName": "Uptime-Watcher-p5p-${arch}-${version}.${ext}"
    },
    "apk": {
      "artifactName": "Uptime-Watcher-apk-${arch}-${version}.${ext}"
    },
    "dmg": {
      "artifactName": "Uptime-Watcher-dmg-${arch}-${version}.${ext}"
    },
    "pkg": {
      "artifactName": "Uptime-Watcher-pkg-${arch}-${version}.${ext}"
    },
    "flatpak": {
      "artifactName": "Uptime-Watcher-flatpak-${arch}-${version}.${ext}"
    },
    "mac": {
      "icon": "icons/favicon-512x512.icns",
      "target": [
        "dmg",
        "zip",
        "pkg",
        "tar.xz",
        "tar.gz",
        "tar.bz2"
      ],
      "category": "public.app-category.productivity",
      "hardenedRuntime": true,
      "gatekeeperAssess": true,
      "x64ArchFiles": "Contents/Resources/app.asar.unpacked/node_modules/lightningcss-darwin-arm64/**"
    },
    "linux": {
      "icon": "icons/favicon-256x256.png",
      "target": [
        "AppImage",
        "deb",
        "rpm",
        "snap",
        "freebsd",
        "pacman",
        "apk",
        "zip",
        "tar.xz",
        "tar.gz",
        "tar.bz2"
      ],
      "category": "Utility",
      "synopsis": "A cross-platform Electron app to monitor website uptime status",
      "maintainer": "Nick2bad4u <20943337+Nick2bad4u@users.noreply.github.com>",
      "desktop": {
        "entry": {
          "Name": "Uptime Watcher",
          "Comment": "View and analyze Website Uptime",
          "Categories": "Utility;"
        }
      }
    }
  },
  "readme": "README.md"
}
