{
  "$schema": "https://www.schemastore.org/package.json",
  "name": "uptime-watcher",
  "version": "10.5.0",
  "description": "An Electron app to monitor website uptime status",
  "keywords": [
    "electron",
    "react",
    "uptime",
    "monitoring"
  ],
  "homepage": "https://github.com/Nick2bad4u/Uptime-Watcher",
  "bugs": {
    "url": "https://github.com/Nick2bad4u/Uptime-Watcher/issues",
    "email": "20943337+Nick2bad4u@users.noreply.github.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Nick2bad4u/Uptime-Watcher.git"
  },
  "license": "Unlicense",
  "author": "Nick2bad4u <20943337+Nick2bad4u@users.noreply.github.com> (https://Uptime-Watcher.typpi.online)",
  "maintainers": [
    {
      "name": "Nick2bad4u",
      "email": "20943337+Nick2bad4u@users.noreply.github.com"
    }
  ],
  "contributors": [
    {
      "name": "Nick2bad4u",
      "email": "20943337+Nick2bad4u@users.noreply.github.com",
      "url": "https://github.com/Nick2bad4u"
    }
  ],
  "type": "commonjs",
  "main": "dist-electron/main.js",
  "scripts": {
    "ai:context": "repomix --compress --include \"src/**,electron/**\" --ignore \"**/test/**\"",
    "build": "npm run build:electron-vite",
    "postbuild": "cpy node_modules/node-sqlite3-wasm/dist/node-sqlite3-wasm.wasm dist-electron/ --flat",
    "build:electron-main": "tsc -p tsconfig.electron.json && npm run postbuild",
    "build:electron-vite": "vite build --config ./vite.config.ts && npx tsc -p ./tsconfig.electron.json && npm run postbuild",
    "build:prepublish": "npm run lint && npm run test && npm run build",
    "check-types": "npm run check:electron && npm run check:frontend",
    "check-types:all": "npm run check:electron && npm run check:frontend && npm run check:electron:test && npm run check:frontend:test",
    "check:all": "npm run check:electron && npm run check:frontend",
    "check:all:test": "npm run check:electron:test && npm run check:frontend:test",
    "check:electron": "tsc --project tsconfig.electron.json --noEmit",
    "check:electron:test": "tsc --project tsconfig.electron.test.json --noEmit",
    "check:frontend": "tsc --project tsconfig.json --noEmit",
    "check:frontend:test": "tsc --project tsconfig.test.json --noEmit",
    "clean": "rimraf dist dist-electron coverage .vite .turbo",
    "postclean": "npm run clean && npm run postbuild",
    "cognitive-complexity": "cognitive-complexity-ts --threshold 10",
    "commit": "git-cz",
    "context": "repomix --compress --include \"src/**,electron/**\" --ignore \"**/test/**\"",
    "copy-sqlite": "cpy node_modules/node-sqlite3-wasm/dist/node-sqlite3-wasm.wasm dist-electron/ --flat",
    "copy-wasm": "cpy node_modules/node-sqlite3-wasm/dist/node-sqlite3-wasm.wasm dist-electron/ --flat",
    "debug:electron": "electron --inspect=5858 .",
    "debug:main": "electron --inspect-brk=5858 .",
    "debug:renderer": "vite --debug",
    "debug:transform": "vite --debug plugin-transform",
    "debug:vite": "vite --debug",
    "profile": "vite --profile",
    "profile:debug": "vite --profile --debug",
    "profile:transform": "vite --debug transform",
    "dep:check": "npm-check",
    "dep:update": "npm-check-updates -u && npm install",
    "detect-secrets": "detect-secrets scan",
    "dev": "vite",
    "dev:profile": "vite --profile",
    "dev:warmup": "vite --debug transform",
    "dev:sqlite3": "cpy node_modules/node-sqlite3-wasm/dist/node-sqlite3-wasm.wasm dist-electron/ --flat",
    "dev:with-sqlite3": "npm run dev:sqlite3 && npm run dev",
    "dist": "npm run build && electron-builder --publish=never",
    "docs": "typedoc --out docs src",
    "docs:build": "npm run docs:typedoc && cd docs/docusaurus && yarn build",
    "docs:build:local": "npm run docs:typedoc:local && cd docs/docusaurus && yarn build",
    "docs:clean": "rimraf docs",
    "docs:deploy": "npm run docs:typedoc && cd docs/docusaurus && yarn deploy",
    "docs:deploy:local": "npm run docs:typedoc:local && cd docs/docusaurus && yarn deploy",
    "docs:download:all": "npm run docs:download:axios && npm run docs:download:react && npm run docs:download:chartjs && npm run docs:download:zustand && npm run docs:download:electron && npm run docs:download:validator && npm run docs:download:zod && npm run docs:download:sqlite3 && npm run docs:download:sqlite3-wasm && npm run docs:download:nodeping && npm run docs:download:tsdoc",
    "docs:download:axios": "node scripts/download-axios-docs.js",
    "docs:download:chartjs": "node scripts/download-chartjs-docs.js",
    "docs:download:electron": "node scripts/download-electron-docs.js",
    "docs:download:nodeping": "node scripts/download-NodePing-docs.js",
    "docs:download:react": "node scripts/download-react-docs.js",
    "docs:download:sqlite3": "node scripts/download-nodeSqlite3-docs.js",
    "docs:download:sqlite3-wasm": "node scripts/download-nodeSqlite3Wasm-docs.js",
    "docs:download:tsdoc": "node scripts/download-tsdoc-tags.js",
    "docs:download:validator": "node scripts/download-validator-docs.js",
    "docs:download:zod": "node scripts/download-Zod-docs.js",
    "docs:download:zustand": "node scripts/download-zustand-docs.js",
    "docs:preview": "serve docs",
    "docs:typedoc": "typedoc --options typedoc.json && typedoc --options typedoc.electron.json && node scripts/fix-mdx-typedoc.js",
    "docs:typedoc:local": "typedoc --options scripts/typedoc-local.json && typedoc --options scripts/typedoc.electron-local.json && node scripts/fix-mdx-typedoc-local.js",
    "docusaurus:broken-links": "npm run docs:typedoc && cd docs/docusaurus && docusaurus check",
    "docusaurus:broken-links:local": "npm run docs:typedoc:local && cd docs/docusaurus && docusaurus check",
    "docusaurus:build": "npm run docs:typedoc && cd docs/docusaurus && docusaurus build",
    "docusaurus:build:local": "npm run docs:typedoc:local && cd docs/docusaurus && docusaurus build",
    "docusaurus:clean": "npm run docs:typedoc && cd docs/docusaurus && docusaurus clear",
    "docusaurus:clean:local": "npm run docs:typedoc:local && cd docs/docusaurus && docusaurus clear",
    "docusaurus:serve": "npm run docs:typedoc && cd docs/docusaurus && docusaurus serve",
    "docusaurus:serve:local": "npm run docs:typedoc:local && cd docs/docusaurus && docusaurus serve",
    "docusaurus:sitemap": "npm run docs:typedoc && cd docs/docusaurus && docusaurus sitemap",
    "docusaurus:sitemap:local": "npm run docs:typedoc:local && cd docs/docusaurus && docusaurus sitemap",
    "docusaurus:start": "npm run docs:typedoc && cd docs/docusaurus && docusaurus start",
    "docusaurus:start:local": "npm run docs:typedoc:local && cd docs/docusaurus && docusaurus start",
    "dupes": "jscpd src/ electron/ shared/",
    "duplicates": "jscpd src/ electron/ shared/",
    "electron": "wait-on tcp:5173 && electron .",
    "electron-dev": "concurrently \"npm run dev\" \"npm run electron\"",
    "electron-dev:debug": "concurrently \"npm run dev\" \"npm run electron:debug\"",
    "electron-dev:info": "concurrently \"npm run dev\" \"npm run electron:info\"",
    "electron-dev:production": "concurrently \"npm run dev\" \"npm run electron:production\"",
    "electron-main:debug": "npm run build:electron-main && NODE_ENV=development ./node_modules/.bin/electron ./dist-electron/main.js",
    "electron-pack": "electron-builder",
    "electron:debug": "wait-on tcp:5173 && electron . --debug",
    "electron:info": "wait-on tcp:5173 && electron . --log-info",
    "electron:log:debug": "electron --log-debug .",
    "electron:log:info": "electron --log-info .",
    "electron:log:prod": "electron --log-production .",
    "electron:production": "wait-on tcp:5173 && electron . --log-production",
    "eslint-find-rules:all": "eslint-find-rules --all-available --flatConfig .\\eslint.config.mjs",
    "eslint-find-rules:current": "eslint-find-rules --current --flatConfig .\\eslint.config.mjs",
    "eslint-find-rules:deprecated": "eslint-find-rules --deprecated --flatConfig .\\eslint.config.mjs",
    "eslint-find-rules:plugin": "eslint-find-rules --plugin --flatConfig .\\eslint.config.mjs",
    "eslint-find-rules:unused": "eslint-find-rules --unused --flatConfig .\\eslint.config.mjs",
    "fetch-tsdoc": "node scripts/download-tsdoc-tags.js",
    "find-empty-dirs": "node .\\scripts\\find-empty-dirs.mjs",
    "find-empty-dirs:all": "node .\\scripts\\find-empty-dirs.mjs --dirs \".\\\"",
    "find-empty-dirs:all:delete": "node .\\scripts\\find-empty-dirs.mjs --dirs \".\\\" --delete",
    "find-empty-dirs:delete": "node .\\scripts\\find-empty-dirs.mjs --delete",
    "fix-db": "npm run postbuild",
    "format": "npm run lint:prettier-fix && npm run lint:css-fix && npm run lint:fix",
    "format:check": "npm run lint:prettier && npm run lint:css && npm run lint",
    "postinstall": "node ./scripts/download-sqlite3-wasm.mjs",
    "knip": "knip",
    "lint": "eslint --cache .",
    "lint:all:check": "eslint --cache . --ext .js,.jsx,.ts,.tsx && npx eslint --cache '**/*.json' && npx eslint --cache '**/*.{yml,yaml}' --parser yaml-eslint-parser && npx eslint --cache '**/*.toml' --parser toml-eslint-parser && npx eslint --cache '**/*.html' --plugin html && npx stylelint --cache src/ electron/ shared/ && npx prettier --cache --cache-location=.prettier-cache --check '**/*.{js,jsx,ts,tsx,css,scss,md,json}' && npx markdownlint '**/*.md' && npx markdown-link-check README.md && find . -name '*.md' -not -path './node_modules/*' -not -path './dist/*' | xargs npx markdown-link-check && npx cspell '**/*.{js,jsx,ts,tsx,md,css,scss,json}' --gitignore && npm audit && npx depcheck --ignores='@types/*,@testing-library/*,@vitest/*' && npx knip && npx sort-package-json --check && npx publint && npx are-the-types-wrong --pack . && npx @biomejs/biome check && npx jscpd --threshold 3 --reporters html,console --ignore '**/node_modules/**,**/dist/**,**/dist-electron/**' src/ && npx madge --circular --extensions ts,tsx,js,jsx src/ && npx leasot 'src/**/*.{js,jsx,ts,tsx}' --reporter markdown",
    "lint:all:fix": "eslint --cache . --ext .js,.jsx,.ts,.tsx --fix && npx eslint --cache \"**/*.json\" --fix || exit 0 && npx eslint --cache \"**/*.{yml,yaml}\" --parser yaml-eslint-parser --fix || exit 0 && npx eslint --cache \"**/*.toml\" --parser toml-eslint-parser --fix || exit 0 && npx eslint --cache \"**/*.html\" --plugin html --fix || exit 0 && npx stylelint --cache src/ electron/ shared/ --fix && npx prettier --cache --cache-location=.prettier-cache --write \"**/*.{js,jsx,ts,tsx,css,scss,md,json}\" && npx cspell \"**/*.{js,jsx,ts,tsx,md,css,scss,json}\" --gitignore --config .cspell.json --fix && npx sort-package-json && npx @biomejs/biome check --write",
    "lint:biome": "@biomejs/biome check",
    "lint:biome:fix": "@biomejs/biome check --fix",
    "lint:biome:write": "@biomejs/biome check --write",
    "lint:ci": "npm run lint:full && npm run lint:strict",
    "lint:circular": "madge --circular --ts-config tsconfig.json --extensions ts,tsx,js,jsx src/ electron/ shared/ --exclude \"(^|[\\\\/])(test|dist|dist-electron|node_modules)($|[\\\\/])\"",
    "lint:circular:electron": "madge --circular --ts-config tsconfig.electron.json --extensions ts,tsx,js,jsx src/ electron/ shared/ --exclude \"(^|[\\\\/])(test|dist|dist-electron|node_modules)($|[\\\\/])\"",
    "lint:cognitive-complexity:electron": "cognitive-complexity-ts --threshold 10 electron/",
    "lint:cognitive-complexity:shared": "cognitive-complexity-ts --threshold 10 shared/",
    "lint:cognitive-complexity:src": "cognitive-complexity-ts --threshold 10 src/",
    "lint:commit": "commitlint --from HEAD~1 --to HEAD --verbose",
    "lint:complexity": "eslint --cache . --ext .js,.jsx,.ts,.tsx --rule '{\"complexity\": [\"warn\", 10], \"max-lines-per-function\": [\"warn\", 50], \"max-depth\": [\"warn\", 3]}' --format @eslint/eslint-formatter-compact",
    "lint:complexity:report": "eslint --cache . --ext .js,.jsx,.ts,.tsx --rule '{\"complexity\": [\"warn\", 10], \"max-lines-per-function\": [\"warn\", 50], \"max-depth\": [\"warn\", 3]}' --format json --output-file complexity-report.json",
    "lint:css": "stylelint --cache --config stylelint.config.js --cache-strategy content --cache-location .\\stylelintcache --cache src/ electron/ shared/",
    "lint:css-fix": "stylelint --cache --config stylelint.config.js --cache-strategy content --cache-location .\\stylelintcache src/ electron/ shared/ --fix",
    "lint:current": "eslint --cache .",
    "lint:depcheck": "depcheck",
    "lint:deps": "depcheck && npx knip",
    "lint:dupes": "jscpd src/ electron/ shared/ --config .jscpd.json",
    "lint:dupes:all": "jscpd src/ electron/ shared/ --config .jscpd.json --min-lines 3",
    "lint:dupes:skiplocal": "jscpd src/ electron/ shared/ --skipLocal --config .jscpd.json",
    "lint:dupes:skiplocal:all": "jscpd src/ electron/ shared/ --skipLocal --config .jscpd.json --min-lines 3",
    "lint:duplicates": "jscpd src/ electron/ shared/ --config .jscpd.json",
    "lint:duplicates:all": "jscpd src/ electron/ shared/ --config .jscpd.json --min-lines 3",
    "lint:duplicates:nonlocal": "jscpd src/ electron/ shared/ --skipLocal --config .jscpd.json",
    "lint:duplicates:nonlocal:all": "jscpd src/ electron/ shared/ --skipLocal --config .jscpd.json --min-lines 3",
    "lint:exports": "ts-unused-exports src/main.tsx",
    "lint:exports:electron": "ts-unused-exports electron/main.ts",
    "lint:fix": "eslint --cache . --fix",
    "lint:format": "prettier . --cache --cache-location=.prettier-cache --check",
    "lint:full": "npm run lint:package && npm run lint:deps && npm run lint:security && npm run lint:js && npm run lint:ts && npm run lint:css && npm run lint:md && npm run lint:prettier && npm run lint:spell && npm run lint:json && npm run lint:duplicates && npm run lint:circular && npm run lint:markdown-links && npm run lint:knip",
    "lint:grype": "grype . -c .grype.yaml",
    "lint:html": "eslint --cache \"**/*.html\" --plugin html",
    "lint:imports": "eslint --cache . --ext .js,.jsx,.ts,.tsx --rule '{\"import/order\": \"error\", \"import/no-duplicates\": \"error\", \"unused-imports/no-unused-imports\": \"error\"}'",
    "lint:js": "eslint --cache \"**/*.{js,jsx}\"",
    "lint:json": "eslint --cache \"**/*.json\"",
    "lint:knip": "knip",
    "lint:leaves": "madge --leaves --ts-config tsconfig.json --extensions ts,tsx,js,jsx src/ electron/ shared/ --exclude \"(^|[\\\\/])(test|dist|dist-electron|node_modules)($|[\\\\/])\"",
    "lint:madge:circular": "madge --circular --ts-config tsconfig.json --extensions ts,tsx,js,jsx src/ electron/ shared/ --exclude \"(^|[\\\\/])(test|dist|dist-electron|node_modules)($|[\\\\/])\"",
    "lint:madge:leaves": "madge --leaves --ts-config tsconfig.json --extensions ts,tsx,js,jsx src/ electron/ shared/ --exclude \"(^|[\\\\/])(test|dist|dist-electron|node_modules)($|[\\\\/])\"",
    "lint:madge:orphans": "madge --orphans --ts-config tsconfig.json --extensions ts,tsx,js,jsx src/ electron/ shared/ --exclude \"(^|[\\\\/])(test|dist|dist-electron|node_modules)($|[\\\\/])\"",
    "lint:markdown": "markdownlint \"**/*.md\"",
    "lint:markdown-links": "markdown-link-check README.md",
    "lint:markdown:fix": "markdownlint \"**/*.md\" --fix",
    "lint:md": "markdownlint \"**/*.md\"",
    "lint:metrics": "sloc src/ electron/ shared/",
    "lint:orphans": "madge --orphans --ts-config tsconfig.json --extensions ts,tsx,js,jsx src/ electron/ shared/ --exclude \"(^|[\\\\/])(test|dist|dist-electron|node_modules)($|[\\\\/])\"",
    "lint:ossf-scorecard": "scorecard-check",
    "lint:package": "sort-package-json && npm run lint:package-check",
    "lint:package-check": "publint && attw --pack .",
    "lint:package-sort": "sort-package-json",
    "lint:package-sort-check": "sort-package-json --check",
    "lint:pre-commit": "npm run lint:staged && npm run lint:quick",
    "lint:prettier": "prettier . --cache --cache-location=.prettier-cache --check",
    "lint:prettier-fix": "prettier . --cache --cache-location=.prettier-cache --write",
    "lint:pretty": "prettier . --cache --cache-location=.prettier-cache --write",
    "lint:prettynow": "prettier . --cache --cache-location=.prettier-cache --write",
    "lint:publint": "publint",
    "lint:quick": "npm run lint:js && npm run lint:ts && npm run lint:prettier",
    "lint:resolve-audit": "resolve-audit --skip-dev",
    "lint:secrets": "detect-secrets scan",
    "lint:security": "npm run lint:security:resolve-audit && npm run lint:security:sensitive",
    "lint:security:resolve-audit": "resolve-audit --skip-dev",
    "lint:security:sensitive": "detect-secrets scan",
    "lint:sloc": "sloc src/ electron/ shared/",
    "lint:sort-package": "sort-package-json",
    "lint:sort-package-check": "sort-package-json --check",
    "lint:spell": "cspell \"**/*.{js,jsx,ts,tsx,md,css,scss,json}\" --cache --cache-strategy content --color --show-suggestions --show-context --gitignore --config .cspell.json",
    "lint:spell-all": "cspell . --cache --cache-strategy content --color --show-suggestions --show-context --gitignore --config .cspell.json",
    "lint:spell-export": "cspell \"**/*.{js,jsx,ts,tsx,md,css,scss,json}\" --gitignore --config .cspell.json --words-only --unique --no-progress",
    "lint:spell-export:fix": "node .\\scripts\\add-cspell-words.mjs",
    "lint:spell:fix": "node .\\scripts\\add-cspell-words.mjs",
    "lint:staged": "lint-staged",
    "lint:strict": "eslint --cache . --ext .js,.jsx,.ts,.tsx --max-warnings 0",
    "lint:todo": "leasot 'src/**/*.{js,jsx,ts,tsx}' --reporter json",
    "lint:todos": "leasot 'src/**/*.{js,jsx,ts,tsx}' --reporter markdown",
    "lint:toml": "eslint --cache \"**/*.toml\" --parser toml-eslint-parser",
    "lint:ts": "eslint --cache \"**/*.{ts,tsx}\"",
    "lint:unused": "knip --include unlisted,unresolved,duplicates",
    "lint:unused-deps": "depcheck --ignores='@types/*,@testing-library/*,@vitest/*'",
    "lint:unused-exports": "ts-unused-exports src/main.tsx",
    "lint:unused-exports:electron": "ts-unused-exports electron/main.ts",
    "lint:vuln": "grype . -c .grype.yaml",
    "lint:vulnerability": "grype . -c .grype.yaml",
    "lint:yaml": "eslint --cache \"**/*.{yml,yaml}\" --parser yaml-eslint-parser",
    "madge:circular": "madge --circular --ts-config tsconfig.json --extensions ts,tsx,js,jsx src/ electron/ shared/ --exclude \"(^|[\\\\/])(test|dist|dist-electron|node_modules)($|[\\\\/])\"",
    "madge:leaves": "madge --leaves --ts-config tsconfig.json --extensions ts,tsx,js,jsx src/ electron/ shared/ --exclude \"(^|[\\\\/])(test|dist|dist-electron|node_modules)($|[\\\\/])\"",
    "madge:orphans": "madge --orphans --ts-config tsconfig.json --extensions ts,tsx,js,jsx src/ electron/ shared/ --exclude \"(^|[\\\\/])(test|dist|dist-electron|node_modules)($|[\\\\/])\"",
    "open:coverage": "open-cli coverage/index.html",
    "open:docs": "open-cli docs/index.html",
    "ossf-scorecard": "scorecard-check",
    "prebuild:off": "npm run lint && npm run type-check",
    "prepare": "husky",
    "prestart:old": "npm run lint && npm run type-check",
    "pretest:old": "npm run lint && npm run type-check",
    "preview": "vite preview",
    "prune": "npm prune",
    "quality": "npm run lint:full && npm run test:coverage",
    "quality:check": "npm run lint:ci && npm run test:codecov",
    "rebuild": "npm run clean && npm install && npm run build",
    "reset": "npm run clean && npm install",
    "postreset": "npm run reset && npm run postbuild",
    "resolve-audit": "resolve-audit --skip-dev",
    "scripts:docs:download:all": "npm run docs:download:all",
    "scripts:docs:download:axios": "node scripts/download-axios-docs.js",
    "scripts:docs:download:chartjs": "node scripts/download-chartjs-docs.js",
    "scripts:docs:download:electron": "node scripts/download-electron-docs.js",
    "scripts:docs:download:nodeping": "node scripts/download-NodePing-docs.js",
    "scripts:docs:download:react": "node scripts/download-react-docs.js",
    "scripts:docs:download:sqlite3": "node scripts/download-nodeSqlite3-docs.js",
    "scripts:docs:download:sqlite3-wasm": "node scripts/download-nodeSqlite3Wasm-docs.js",
    "scripts:docs:download:tsdoc": "node scripts/download-tsdoc-tags.js",
    "scripts:docs:download:validator": "node scripts/download-validator-docs.js",
    "scripts:docs:download:zod": "node scripts/download-Zod-docs.js",
    "scripts:docs:download:zustand": "node scripts/download-zustand-docs.js",
    "scripts:fetch-tsdoc": "node scripts/download-tsdoc-tags.js",
    "scripts:find-empty-dirs": "node .\\scripts\\find-empty-dirs.mjs",
    "scripts:find-empty-dirs:all": "node .\\scripts\\find-empty-dirs.mjs --dirs \".\\\"",
    "scripts:find-empty-dirs:all:delete": "node .\\scripts\\find-empty-dirs.mjs --dirs \".\\\" --delete",
    "scripts:find-empty-dirs:delete": "node .\\scripts\\find-empty-dirs.mjs --delete",
    "scripts:lint:spell-export:fix": "node .\\scripts\\add-cspell-words.mjs",
    "scripts:lint:spell:fix": "node .\\scripts\\add-cspell-words.mjs",
    "scripts:postinstall": "node ./scripts/download-sqlite3-wasm.mjs",
    "scripts:sqlite:download-wasm": "node ./scripts/download-sqlite3-wasm.mjs",
    "scripts:sqlite:verify-wasm": "node ./scripts/verify-sqlite3-wasm.js || echo 'Verification script not implemented yet.'",
    "scripts:tsdoc-update": "node scripts/download-tsdoc-tags.js",
    "scripts:update-tsdoc": "node scripts/download-tsdoc-tags.js",
    "scripts:validate:components": "node ./scripts/validate-components.js",
    "security:check": "npm audit",
    "security:fix": "npm audit fix",
    "sloc": "sloc src/ electron/ shared/",
    "sort-package": "sort-package-json",
    "sort-package-check": "sort-package-json --check",
    "sqlite:clean-wasm": "rm -f dist-electron/node-sqlite3-wasm.wasm",
    "sqlite:download-wasm": "node ./scripts/download-sqlite3-wasm.mjs",
    "sqlite:reinstall-wasm": "npm run sqlite:clean-wasm && npm run sqlite:download-wasm",
    "sqlite:verify-wasm": "node ./scripts/verify-sqlite3-wasm.js || echo 'Verification script not implemented yet.'",
    "start": "npm run dev",
    "start-both": "concurrently \"npm run dev\" \"npm run electron-dev\"",
    "start-fix": "npm run postbuild && npm run dev",
    "start:clean": "npm run clean && npm run start",
    "start:debug": "npm run debug:electron",
    "start:electron": "electron .",
    "start:prod": "npm run build && npm run start:electron",
    "start:renderer": "vite",
    "start:reset": "npm run clean && npm run build && npm run start",
    "test": "vitest run",
    "test:bail": "vitest --bail 50",
    "test:codecov": "npm run test:coverage",
    "test:coverage": "vitest run --coverage",
    "test:coverage:open": "npm run test:coverage && npm run open:coverage",
    "test:debug": "vitest run --debug",
    "test:debug:coverage": "vitest run --coverage --debug",
    "test:debug:ui": "vitest --ui --debug",
    "test:debug:watch": "vitest --watch --debug",
    "test:electron": "vitest run --config vitest.electron.config.ts",
    "test:electron:coverage": "vitest run --config vitest.electron.config.ts --coverage",
    "test:electron:ui": "vitest --config vitest.electron.config.ts --ui",
    "test:run": "vitest run",
    "test:run:bail": "vitest run --bail 50",
    "test:run:watch": "vitest run --watch",
    "test:ui": "vitest run --ui",
    "test:watch": "vitest run --watch",
    "test:watch:electron": "vitest run --config vitest.electron.config.ts --watch",
    "test:watch:frontend": "vitest run --config vitest.config.ts --watch",
    "bench": "vitest bench --run",
    "bench:watch": "vitest bench",
    "bench:ui": "vitest bench --ui",
    "bench:compare": "vitest bench --run --compare",
    "tsdoc-update": "node scripts/download-tsdoc-tags.js",
    "tsg:graph:electron": "tsg --TB --config tsconfig.electron.json",
    "tsg:graph:src": "tsg --TB --config tsconfig.json",
    "tsg:graph:stats": "tsg --TB --metrics --measure-instability",
    "type-check": "npm run check-types",
    "type-check:all": "npm run check:all",
    "type-check:test": "npm run check:all:test",
    "update-tsdoc": "node scripts/download-tsdoc-tags.js",
    "validate:components": "node ./scripts/validate-components.js"
  },
  "eslintConfig": {
    "extends": "eslint.config.mjs"
  },
  "overrides": {
    "@codecov/vite-plugin": {
      "vite": "$vite"
    }
  },
  "dependencies": {
    "axios": "^1.11.0",
    "chart.js": "^4.5.0",
    "chartjs-adapter-date-fns": "^3.0.0",
    "chartjs-plugin-zoom": "^2.2.0",
    "electron-log": "^5.4.2",
    "electron-updater": "^6.6.2",
    "is-port-reachable": "^4.0.0",
    "node-sqlite3-wasm": "^0.8.47",
    "ping": "^0.4.4",
    "react": "^19.1.1",
    "react-chartjs-2": "^5.3.0",
    "react-dom": "^19.1.1",
    "react-icons": "^5.5.0",
    "validator": "^13.15.15",
    "zod": "^4.0.17",
    "zustand": "^5.0.7"
  },
  "devDependencies": {
    "@arethetypeswrong/cli": "^0.18.2",
    "@biomejs/biome": "2.1.4",
    "@codecov/vite-plugin": "^1.9.1",
    "@commitlint/cli": "^19.8.1",
    "@commitlint/config-conventional": "^19.8.1",
    "@commitlint/prompt": "^19.8.1",
    "@commitlint/prompt-cli": "^19.8.1",
    "@commitlint/types": "^19.8.1",
    "@cspell/cspell-bundled-dicts": "^9.2.0",
    "@cspell/cspell-types": "^9.2.0",
    "@dword-design/eslint-plugin-import-alias": "^6.0.3",
    "@electron/notarize": "^3.0.2",
    "@eslint-community/eslint-plugin-eslint-comments": "^4.5.0",
    "@eslint-react/eslint-plugin": "^1.52.3",
    "@eslint/css": "^0.10.0",
    "@eslint/eslintrc": "^3.3.1",
    "@eslint/js": "^9.33.0",
    "@eslint/json": "^0.13.1",
    "@eslint/markdown": "^7.1.0",
    "@eslint/mcp": "^0.1.1",
    "@executeautomation/database-server": "^1.1.0",
    "@jscpd/badge-reporter": "^4.0.1",
    "@microsoft/eslint-plugin-sdl": "^1.1.0",
    "@microsoft/tsdoc-config": "^0.17.1",
    "@playwright/test": "^1.54.2",
    "@putout/eslint": "^4.1.0",
    "@putout/eslint-flat": "^3.0.1",
    "@react-scan/vite-plugin-react-scan": "^0.1.8",
    "@secretlint/secretlint-rule-preset-recommend": "^11.0.1",
    "@styled/typescript-styled-plugin": "^1.0.1",
    "@stylistic/eslint-plugin": "^5.2.3",
    "@stylistic/stylelint-config": "^3.0.1",
    "@tailwindcss/container-queries": "^0.1.1",
    "@tailwindcss/forms": "^0.5.10",
    "@tailwindcss/postcss": "^4.1.11",
    "@tailwindcss/typography": "^0.5.16",
    "@testing-library/dom": "^10.4.1",
    "@testing-library/jest-dom": "^6.6.4",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^14.6.1",
    "@types/async": "^3.2.25",
    "@types/eslint": "^9.6.1",
    "@types/eslint-plugin-jsx-a11y": "^6.10.0",
    "@types/eslint-plugin-prettier": "^3.1.3",
    "@types/eslint-plugin-react-refresh": "^0.4.0",
    "@types/eslint-plugin-security": "^3.0.0",
    "@types/eslint-plugin-tailwindcss": "^3.17.0",
    "@types/jest": "^30.0.0",
    "@types/jsdom": "^21.1.7",
    "@types/json-schema": "^7.0.15",
    "@types/lint-staged": "^14.0.0",
    "@types/madge": "^5.0.3",
    "@types/mocha": "^10.0.10",
    "@types/node": "^24.2.1",
    "@types/ping": "^0.4.4",
    "@types/prop-types": "^15.7.15",
    "@types/react": "^19.1.9",
    "@types/react-dom": "^19.1.7",
    "@types/react-refresh": "^0.14.6",
    "@types/semver": "^7.7.0",
    "@types/sqlite3": "^5.1.0",
    "@types/trusted-types": "^2.0.7",
    "@types/validator": "^13.15.2",
    "@types/wait-on": "^5.3.4",
    "@types/webpack": "^5.28.5",
    "@typescript-eslint/eslint-plugin": "^8.39.0",
    "@typescript-eslint/parser": "^8.39.0",
    "@typescript-eslint/types": "^8.39.0",
    "@typescript/native-preview": "^7.0.0-dev.20250810.1",
    "@vitejs/plugin-react": "^5.0.0",
    "@vitest/coverage-istanbul": "^3.2.4",
    "@vitest/coverage-v8": "^3.2.4",
    "@vitest/eslint-plugin": "^1.3.4",
    "@vitest/snapshot": "^3.2.4",
    "@vitest/ui": "^3.2.4",
    "async": "^3.2.6",
    "autoprefixer": "^10.4.21",
    "canvas": "^3.1.2",
    "cognitive-complexity-ts": "^0.6.5",
    "concurrently": "^9.2.0",
    "cpy-cli": "^5.0.0",
    "cross-env": "^10.0.0",
    "cspell": "^9.2.0",
    "depcheck": "^1.4.7",
    "docusaurus-plugin-typedoc": "^1.4.2",
    "electron": "^37.2.6",
    "electron-builder": "^24.13.3",
    "electron-builder-squirrel-windows": "^24.13.3",
    "electron-devtools-installer": "^4.0.0",
    "electron-publish": "^26.0.11",
    "eslint": "^9.33.0",
    "eslint-config-prettier": "^10.1.8",
    "eslint-import-resolver-typescript": "^4.4.4",
    "eslint-plugin-array-func": "^5.0.2",
    "eslint-plugin-boundaries": "^5.0.1",
    "eslint-plugin-canonical": "^5.1.3",
    "eslint-plugin-comment-length": "^2.2.2",
    "eslint-plugin-compat": "^6.0.2",
    "eslint-plugin-css": "^0.11.0",
    "eslint-plugin-depend": "^1.2.0",
    "eslint-plugin-es-x": "^9.0.0",
    "eslint-plugin-eslint-comments": "^3.2.0",
    "eslint-plugin-exception-handling": "^1.5.4",
    "eslint-plugin-file-progress": "^3.0.2",
    "eslint-plugin-fsecond": "^1.3.0",
    "eslint-plugin-functional": "^9.0.2",
    "eslint-plugin-html": "^8.1.3",
    "eslint-plugin-implicit-dependencies": "^1.1.1",
    "eslint-plugin-import-x": "^4.16.1",
    "eslint-plugin-istanbul": "^0.1.2",
    "eslint-plugin-json-schema-validator": "^5.4.1",
    "eslint-plugin-jsonc": "^2.20.1",
    "eslint-plugin-jsx-a11y": "^6.10.2",
    "eslint-plugin-listeners": "^1.5.1",
    "eslint-plugin-math": "^0.13.0",
    "eslint-plugin-n": "^17.21.3",
    "eslint-plugin-no-barrel-files": "^1.2.2",
    "eslint-plugin-no-function-declare-after-return": "^1.1.0",
    "eslint-plugin-no-only-tests": "^3.3.0",
    "eslint-plugin-no-unsanitized": "^4.1.2",
    "eslint-plugin-no-use-extend-native": "^0.7.2",
    "eslint-plugin-node-dependencies": "^1.1.2",
    "eslint-plugin-observers": "^1.0.1",
    "eslint-plugin-perfectionist": "^4.15.0",
    "eslint-plugin-prefer-arrow": "^1.2.3",
    "eslint-plugin-prettier": "^5.5.4",
    "eslint-plugin-promise": "^7.2.1",
    "eslint-plugin-putout": "^28.0.4",
    "eslint-plugin-react": "^7.37.5",
    "eslint-plugin-react-compiler": "^19.1.0-rc.2",
    "eslint-plugin-react-dom": "^1.52.3",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-hooks-extra": "^1.52.3",
    "eslint-plugin-react-naming-convention": "^1.52.3",
    "eslint-plugin-react-refresh": "^0.4.20",
    "eslint-plugin-react-web-api": "^1.52.3",
    "eslint-plugin-redos": "^4.5.0",
    "eslint-plugin-regexp": "^2.10.0",
    "eslint-plugin-require-jsdoc": "^1.0.4",
    "eslint-plugin-security": "^3.0.1",
    "eslint-plugin-sonarjs": "^3.0.4",
    "eslint-plugin-sort-class-members": "^1.21.0",
    "eslint-plugin-sort-destructure-keys": "^2.0.0",
    "eslint-plugin-sql-template": "^3.1.0",
    "eslint-plugin-tailwindcss": "^4.0.0-beta.0",
    "eslint-plugin-testing-library": "^7.6.3",
    "eslint-plugin-toml": "^0.12.0",
    "eslint-plugin-tsdoc": "^0.4.0",
    "eslint-plugin-unicorn": "^60.0.0",
    "eslint-plugin-unused-imports": "^4.1.4",
    "eslint-plugin-vitest-globals": "^1.5.0",
    "eslint-plugin-write-good-comments": "^0.2.0",
    "eslint-plugin-xss": "^0.1.12",
    "eslint-plugin-yml": "^1.18.0",
    "git-cliff": "^2.10.0",
    "globals": "^16.3.0",
    "globals-vitest": "^3.2.4",
    "husky": "^9.1.7",
    "jiti": "^2.5.1",
    "jscpd": "^4.0.5",
    "jsdom": "^26.1.0",
    "jsonc-eslint-parser": "^2.4.0",
    "knip": "^5.62.0",
    "leasot": "^14.4.0",
    "lint-staged": "^16.1.5",
    "madge": "^8.0.0",
    "markdown-link-check": "^3.13.7",
    "markdownlint": "^0.38.0",
    "msw": "^2.10.4",
    "nyc": "^17.1.0",
    "pkg-types": "^2.2.0",
    "postcss": "^8.5.6",
    "postcss-assets": "^6.0.0",
    "postcss-inline-svg": "^6.0.0",
    "postcss-reporter": "^7.1.0",
    "prettier": "^3.6.2",
    "prettier-eslint": "^16.4.2",
    "prettier-plugin-jsdoc": "^1.3.3",
    "prettier-plugin-multiline-arrays": "^4.0.3",
    "prettier-plugin-tailwindcss": "^0.6.14",
    "publint": "^0.3.12",
    "putout": "^40.5.1",
    "react-refresh": "^0.17.0",
    "react-scan": "^0.4.3",
    "rollup-plugin-visualizer": "^6.0.3",
    "secretlint": "^11.0.1",
    "sort-package-json": "^3.4.0",
    "stylelint": "^16.23.1",
    "stylelint-config-alphabetical-order": "^1.0.0",
    "stylelint-config-recess-order": "^7.1.0",
    "stylelint-config-recommended": "^17.0.0",
    "stylelint-config-standard": "^39.0.0",
    "stylelint-config-standard-scss": "^15.0.1",
    "stylelint-config-tailwindcss": "^1.0.0",
    "stylelint-order": "^7.0.0",
    "stylelint-plugin-defensive-css": "^1.0.4",
    "stylelint-prettier": "^5.0.3",
    "stylelint-react-native": "^2.7.0",
    "stylelint-use-nesting": "^6.0.0",
    "tailwind-scrollbar-hide": "^4.0.0",
    "tailwindcss": "^4.1.11",
    "toml-eslint-parser": "^0.10.0",
    "ts-morph": "^26.0.0",
    "ts-morph-helpers": "^0.6.3",
    "ts-unused-exports": "^11.0.1",
    "tslib": "^2.8.1",
    "tw-animate-css": "^1.3.6",
    "type-fest": "^4.41.0",
    "typedoc": "^0.28.10",
    "typedoc-plugin-dt-links": "^2.0.14",
    "typedoc-plugin-external-package-links": "^0.1.0",
    "typedoc-plugin-extras": "^4.0.1",
    "typedoc-plugin-markdown": "^4.8.0",
    "typedoc-plugin-mdn-links": "^5.0.8",
    "typedoc-plugin-zod": "^1.4.2",
    "typescript": "^5.9.2",
    "typescript-eslint": "^8.39.0",
    "typescript-eslint-language-service": "^5.0.5",
    "typestat": "^0.8.18",
    "vite": "^7.1.1",
    "vite-bundle-analyzer": "^1.2.1",
    "vite-bundle-visualizer": "^1.2.1",
    "vite-css-modules": "^1.10.0",
    "vite-plugin-checker": "^0.10.2",
    "vite-plugin-devtools-json": "^0.4.1",
    "vite-plugin-electron": "^0.29.0",
    "vite-plugin-eslint2": "^5.0.4",
    "vite-plugin-mcp": "^0.2.4",
    "vite-plugin-package-version": "^1.1.0",
    "vite-plugin-static-copy": "^3.1.1",
    "vite-plugin-tsconfig-paths": "^1.4.1",
    "vitest": "^3.2.4",
    "wait-on": "^8.0.4",
    "yaml-eslint-parser": "^1.3.0"
  },
  "peerDependencies": {
    "react-scan": "^0.4.3"
  },
  "packageManager": "npm@11.5.2",
  "engines": {
    "node": ">=23.0.0"
  },
  "os": [
    "windows",
    "linux",
    "mac",
    "macOS",
    "win64",
    "win64-exe",
    "win64-squirrel",
    "win64-msi",
    "win64-zip",
    "win64-7z",
    "win64-nsis",
    "win64-nsis-web",
    "win64-portable",
    "win64-tar.bz2",
    "win64-tar.gz",
    "win64-tar.xz",
    "win32",
    "win32-exe",
    "win32-squirrel",
    "win32-msi",
    "win32-zip",
    "win32-7z",
    "win32-nsis",
    "win32-nsis-web",
    "win32-portable",
    "win32-tar.bz2",
    "win32-tar.gz",
    "win32-tar.xz",
    "mac-x64-dmg",
    "mac-x64-pkg",
    "mac-x64-tar.xz",
    "mac-x64-tar.gz",
    "mac-x64-tar.bz2",
    "mac-arm64-dmg",
    "mac-arm64-pkg",
    "mac-arm64-tar.xz",
    "mac-arm64-tar.gz",
    "mac-arm64-tar.bz2",
    "darwin",
    "freebsd",
    "apk",
    "pacman",
    "deb",
    "rpm",
    "snap"
  ],
  "icon": "icons/favicon.ico",
  "appid": "io.github.uptime-watcher",
  "build": {
    "icon": "icons/favicon.ico",
    "appId": "io.github.uptime-watcher",
    "artifactName": "Uptime-Watcher-${platform}-${arch}-${version}.${ext}",
    "asar": true,
    "publish": [
      {
        "provider": "github",
        "owner": "Nick2bad4u",
        "repo": "Uptime-Watcher"
      }
    ],
    "productName": "Uptime-Watcher",
    "directories": {
      "output": "dist"
    },
    "files": [
      "dist-electron/**/*",
      "dist/**/*",
      "node_modules/**/*",
      "!node_modules/@tailwindcss/oxide-*",
      "!node_modules/@tailwindcss/oxide-*/**",
      "!dist/mac-universal-*",
      "!dist/*.app",
      "!dist/*.dmg",
      "!dist/*.zip"
    ],
    "win": {
      "icon": "icons/favicon-256x256.ico",
      "target": [
        "nsis",
        "nsis-web",
        "zip",
        "7z",
        "portable",
        "squirrel",
        "msi",
        "tar.xz",
        "tar.gz",
        "tar.bz2"
      ],
      "legalTrademarks": "Uptime Watcher",
      "requestedExecutionLevel": "asInvoker"
    },
    "nsis": {
      "oneClick": false,
      "allowElevation": true,
      "allowToChangeInstallationDirectory": true,
      "createDesktopShortcut": true,
      "createStartMenuShortcut": true,
      "runAfterFinish": true,
      "artifactName": "Uptime-Watcher-nsis-${arch}-${version}.${ext}"
    },
    "nsisWeb": {
      "artifactName": "Uptime-Watcher-nsis-web-${arch}-${version}.${ext}"
    },
    "portable": {
      "artifactName": "Uptime-Watcher-portable-${arch}-${version}.${ext}"
    },
    "squirrelWindows": {
      "artifactName": "Uptime-Watcher-squirrel-${arch}-${version}.${ext}"
    },
    "msi": {
      "artifactName": "Uptime-Watcher-msi-${arch}-${version}.${ext}"
    },
    "appImage": {
      "artifactName": "Uptime-Watcher-appimage-${arch}-${version}.${ext}"
    },
    "deb": {
      "artifactName": "Uptime-Watcher-deb-${arch}-${version}.${ext}"
    },
    "rpm": {
      "artifactName": "Uptime-Watcher-rpm-${arch}-${version}.${ext}"
    },
    "snap": {
      "artifactName": "Uptime-Watcher-snap-${arch}-${version}.${ext}"
    },
    "freebsd": {
      "artifactName": "Uptime-Watcher-freebsd-${arch}-${version}.${ext}"
    },
    "pacman": {
      "artifactName": "Uptime-Watcher-pacman-${arch}-${version}.${ext}"
    },
    "p5p": {
      "artifactName": "Uptime-Watcher-p5p-${arch}-${version}.${ext}"
    },
    "apk": {
      "artifactName": "Uptime-Watcher-apk-${arch}-${version}.${ext}"
    },
    "dmg": {
      "artifactName": "Uptime-Watcher-dmg-${arch}-${version}.${ext}"
    },
    "pkg": {
      "artifactName": "Uptime-Watcher-pkg-${arch}-${version}.${ext}"
    },
    "flatpak": {
      "artifactName": "Uptime-Watcher-flatpak-${arch}-${version}.${ext}"
    },
    "mac": {
      "icon": "icons/favicon-512x512.icns",
      "target": [
        "dmg",
        "zip",
        "pkg",
        "tar.xz",
        "tar.gz",
        "tar.bz2"
      ],
      "category": "public.app-category.productivity",
      "hardenedRuntime": true,
      "gatekeeperAssess": true,
      "x64ArchFiles": "Contents/Resources/app.asar.unpacked/node_modules/lightningcss-darwin-arm64/**"
    },
    "linux": {
      "icon": "icons/favicon-256x256.png",
      "target": [
        "AppImage",
        "deb",
        "rpm",
        "snap",
        "freebsd",
        "pacman",
        "apk",
        "zip",
        "tar.xz",
        "tar.gz",
        "tar.bz2"
      ],
      "category": "Utility",
      "synopsis": "A cross-platform Electron app to monitor website uptime status",
      "maintainer": "Nick2bad4u <20943337+Nick2bad4u@users.noreply.github.com>",
      "desktop": {
        "entry": {
          "Name": "Uptime Watcher",
          "Comment": "View and analyze Website Uptime",
          "Categories": "Utility;"
        }
      }
    }
  },
  "readme": "README.md"
}
