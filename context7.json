{
    "$schema": "https://context7.com/schema/context7.json",
    "branch": "main",
    "description": "Uptime Watcher: Electron desktop app for monitoring websites, APIs, servers, and network services with real-time updates, response analytics, historical data visualization, and no cloud dependency.",
    "excludeFiles": [
        "CHANGELOG.md",
        "changelog.md",
        "CHANGELOG.mdx",
        "changelog.mdx",
        "LICENSE.md",
        "license.md",
        "CODE_OF_CONDUCT.md",
        "code_of_conduct.md"
    ],
    "excludeFolders": [
        "^archive(/.*)?$",
        "^archived(/.*)?$",
        "^deprecated(/.*)?$",
        "^docs(/.*)?$",
        "^node_modules(/.*)?$",
        "^dist(/.*)?$",
        "^build(/.*)?$",
        "^\\.vite(/.*)?$",
        "^\\.git(/.*)?$",
        "^\\.github(/.*)?$",
        "^i18n(/.*)?$",
        "^legacy(/.*)?$",
        "^old(/.*)?$",
        "^outdated(/.*)?$",
        "^previous(/.*)?$",
        "^superseded(/.*)?$",
        "^coverage(/.*)?$",
        "^test(/.*)?$",
        "^tests(/.*)?$",
        "^scripts(/.*)?$",
        "^public(/.*)?$",
        "^config(/.*)?$",
        "^\\..+(/.*)?$"
    ],
    "folders": [],
    "previousVersions": [],
    "projectTitle": "Uptime Watcher",
    "rules": [
        "Use Electron for building the desktop application with secure IPC via contextBridge",
        "Manage state with domain-specific Zustand stores; avoid global state",
        "Perform all database operations using the repository pattern and wrap in transactions via executeTransaction()",
        "Use TypedEventBus for event handling with middleware and correlation IDs",
        "Ensure type safety with strict TypeScript; avoid any, unknown, null, or undefined where possible",
        "Use TailwindCSS for styling and Vite for building the React frontend",
        "Implement centralized logging with structured logging and configurable log levels",
        "Follow comprehensive TSDocs for codebase, architecture, and development processes",
        "Use Vitest for unit and integration tests, Fast-Check for property-based testing, and Playwright for end-to-end tests",
        "Adhere to secure IPC communication, input validation, and Electron security best practices"
    ]
}
