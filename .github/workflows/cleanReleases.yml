name: Clean Old Releases

on:
    workflow_run:
        workflows: ["Build and Release Electron App"]
        types:
            - completed
        branches:
            - main
    workflow_dispatch:
        inputs:
            keep_last:
                description: "Number of most recent releases to keep"
                required: true
                default: "10"
            delete_tags:
                description: "Also delete git tags (true/false)"
                required: true
                default: "true"

permissions: write-all

jobs:
    clean_releases:
        runs-on: ubuntu-latest
        steps:
            - name: Harden the runner (Audit all outbound calls)
              uses: step-security/harden-runner@002fdce3c6a235733a90a27c80493a3241e56863 # v2.12.1
              with:
                  egress-policy: audit

            - name: Checkout repository
              uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

            - name: Set up git user
              run: |
                  git config --global user.name "Nick2bad4u"
                  git config --global user.email "20943337+Nick2bad4u@users.noreply.github.com"
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            - name: Clean old releases and tags
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  KEEP_LAST: ${{ github.event.inputs.keep_last }}
                  DELETE_TAGS: ${{ github.event.inputs.delete_tags }}
              run: |
                  KEEP_LAST=${KEEP_LAST:-10}
                  DELETE_TAGS=${DELETE_TAGS:-true}
                  echo "Keeping last $KEEP_LAST releases. Delete tags: $DELETE_TAGS"

                  releases=$(gh release list --limit 1000 --json tagName,publishedAt)
                  echo "RAW JSON OUTPUT:"
                  echo "$releases"
                  count=$(echo "$releases" | jq 'length')
                  echo "RELEASE COUNT: $count"
                  if [ "$count" -eq 0 ]; then
                    echo "No releases found after JSON parse."
                    exit 0
                  fi

                  # Filter out releases with missing publishedAt
                  releases=$(echo "$releases" | jq '[.[] | select(.publishedAt != null)]')
                  count=$(echo "$releases" | jq 'length')
                  echo "RELEASE COUNT after filter: $count"

                  # Sort by publishedAt
                  releases=$(echo "$releases" | jq 'sort_by(.publishedAt)')
                  echo "RELEASES after sort:"
                  echo "$releases" | jq -r '.[] | "\(.tagName) \(.publishedAt)"'        # Find first release for each major version (chronologically first, not just first in list)
                  first_majors=$(echo "$releases" | jq -r '
                    group_by(.tagName | gsub("^v"; "") | split(".")[0] | tonumber) |
                    map(sort_by(.publishedAt) | .[0].tagName) |
                    .[]
                  ')
                  echo "DEBUG: First major versions: $first_majors"

                  # Get last X releases
                  last_x=$(echo "$releases" | jq -r '.[-'"$KEEP_LAST"':] | .[].tagName')
                  echo "DEBUG: Last $KEEP_LAST releases: $last_x"

                  # Combine tags to keep
                  keep_tags=$(echo -e "$first_majors\n$last_x" | sort | uniq)
                  echo "DEBUG: Keep tags: $keep_tags"

                  # Find releases to delete
                  to_delete=$(echo "$releases" | jq -r '.[] | .tagName' | grep -vxFf <(echo "$keep_tags") || true)
                  echo "DEBUG: To delete: $to_delete"

                  echo "DEBUG: Keep tags (one per line):"
                  echo "$keep_tags" | nl

                  echo "DEBUG: To delete (one per line):"
                  echo "$to_delete" | nl

                  if [ -z "$to_delete" ]; then
                    echo "No releases to delete. Exiting."
                    exit 0
                  fi

                  echo "The following releases will be deleted:"
                  echo "$to_delete"

                  for tag in $to_delete; do
                    echo "Deleting release $tag..."
                    gh release delete "$tag" --yes || echo "Failed to delete release $tag (may not exist or already deleted)"
                    if [ "$DELETE_TAGS" = "true" ]; then
                      if git tag | grep -qx "$tag"; then
                        echo "Deleting tag $tag locally..."
                        git tag -d "$tag" || true
                      fi
                      echo "Deleting tag $tag remotely..."
                      git push origin ":refs/tags/$tag" || echo "Failed to delete remote tag $tag"
                    fi
                  done

                  if [ "$DELETE_TAGS" = "true" ]; then
                    # Delete orphan tags
                    all_tags=$(git tag)
                    release_tags=$(gh release list --limit 1000 --json tagName | jq -r '.[].tagName' | tr '[:upper:]' '[:lower:]')
                    echo "DEBUG: All tags (one per line):"
                    echo "$all_tags" | nl
                    echo "DEBUG: Release tags (one per line):"
                    echo "$release_tags" | nl
                    for tag in $all_tags; do
                      tag_lc=$(echo "$tag" | tr '[:upper:]' '[:lower:]')
                      tag_nov="${tag_lc/#v/}"
                      if ! echo "$release_tags" | grep -qxF "$tag_lc" && ! echo "$release_tags" | grep -qxF "$tag_nov"; then
                        echo "Deleting orphan tag $tag"
                        git tag -d "$tag" || true
                        git push origin ":refs/tags/$tag" || echo "Failed to delete orphan remote tag $tag" || true
                      fi
                    done
                  fi

                  echo "Deletion complete."
                  exit 0
              continue-on-error: true
