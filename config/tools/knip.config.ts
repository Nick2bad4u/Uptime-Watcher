/**
 * Repository-specific configuration for Knip dependency analysis.
 *
 * @packageDocumentation
 */
import type { KnipConfig } from "knip";

/**
 * Knip configuration that scopes entry points and dependency heuristics to the
 * Uptime Watcher monorepo layout.
 */
const knipConfig: KnipConfig = {
    $schema: "https://unpkg.com/knip@5/schema.json",
    entry: [
        "electron/main.ts",
        "electron/preload.ts",
        "shared/types.ts",
        "src/App.tsx",
        "src/main.tsx",
        "vite.config.ts",
        "vitest.config.ts",
        "vitest.electron.config.ts",
        "vitest.shared.config.ts",
    ],
    ignore: [
        "**/*.bench.ts",
        "**/*.spec.ts",
        "**/*.test.ts",
        "**/test/**",
        "**/tests/**",
        "benchmarks/**",
        "docs/**",
        "scripts/**",
        "shared/types/monitorTypes.ts",
        "shared/types/themeConfig.ts",
    ],
    ignoreBinaries: [
        "actionlint",
        "config/tools/knip.config.ts",
        "deploy",
        "detect-secrets",
        "docusaurus",
        "eslint-find-rules",
        "gh",
        "git-cz",
        "grype",
        "jq",
        "markdownlint",
        "markdownlint",
        "ncu",
        "npm-check",
        "npm-check-updates",
        "open-cli",
        "powershell",
        "repomix",
        "resolve-audit",
        "rimraf",
        "scorecard-check",
        "serve",
        "sloc",
        "ts-node",
        "tsg",
        "winget",
        "yamllint",
    ],
    ignoreDependencies: [
        "@awmottaz/prettier-plugin-void-html",
        "@commitlint/config-conventional",
        "@commitlint/prompt",
        "@commitlint/prompt-cli",
        "@commitlint/types",
        "@cspell/cspell-bundled-dicts",
        "@cspell/cspell-types",
        "@csstools/stylelint-formatter-github",
        "@dword-design/eslint-plugin-import-alias",
        "@electron/notarize",
        "@eslint/eslintrc",
        "@eslint/mcp",
        "@executeautomation/database-server",
        "@jscpd/badge-reporter",
        "@microsoft/eslint-formatter-sarif",
        "@microsoft/tsdoc-config",
        "@modelcontextprotocol/server-sequential-thinking",
        "@putout/eslint",
        "@putout/eslint-flat",
        "@secretlint/secretlint-rule-no-dotenv",
        "@secretlint/secretlint-rule-no-homedir",
        "@secretlint/secretlint-rule-pattern",
        "@secretlint/secretlint-rule-preset-recommend",
        "@secretlint/secretlint-rule-secp256k1-privatekey",
        "@storybook/builder-vite",
        "@storybook/react",
        "@storybook/test-runner",
        "@stylistic/eslint-plugin",
        "@tailwindcss/forms",
        "@tailwindcss/typography",
        "@types/async",
        "@types/babel__core",
        "@types/cssnano",
        "@types/eslint",
        "@types/eslint-plugin-prettier",
        "@types/eslint-plugin-react-refresh",
        "@types/fs-extra",
        "@types/json-schema",
        "@types/madge",
        "@types/mocha",
        "@types/prop-types",
        "@types/react-refresh",
        "@types/semver",
        "@types/sqlite3",
        "@types/trusted-types",
        "@types/wait-on",
        "@types/webpack",
        "@types/ws",
        "@typescript-eslint/types",
        "@vitest/coverage-istanbul",
        "@vitest/snapshot",
        "async",
        "babel-plugin-react-compiler",
        "bufferutil",
        "chartjs-adapter-date-fns",
        "chartjs-plugin-zoom",
        "cli-table3",
        "cssnano",
        "cssnano-preset-advanced",
        "docusaurus-plugin-typedoc",
        "electron-builder-squirrel-windows",
        "electron-debug",
        "electron-devtools-installer",
        "electron-publish",
        "eslint-config-eslint.config.mjs",
        "eslint-formatter-badger",
        "eslint-formatter-compact",
        "eslint-formatter-gha",
        "eslint-formatter-github-annotations",
        "eslint-formatter-html",
        "eslint-formatter-markdown",
        "eslint-formatter-pretty",
        "eslint-formatter-summary",
        "eslint-formatter-summary-chart",
        "eslint-plugin-css",
        "eslint-plugin-es-x",
        "eslint-plugin-eslint-comments",
        "eslint-plugin-fsecond",
        "eslint-plugin-html",
        "eslint-plugin-node-dependencies",
        "eslint-plugin-publint",
        "eslint-plugin-putout",
        "eslint-plugin-tree-shaking",
        "eslint-summary",
        "force",
        "fast-deep-equal",
        "fs-extra",
        "globals-vitest",
        "istanbul-lib-coverage",
        "istanbul-lib-report",
        "istanbul-reports",
        "lcov-result-merger",
        "madge",
        "markdown-to-jsx",
        "markdownlint",
        "node-abi",
        "nyc",
        "pkg-types",
        "postcss-combine-duplicated-selectors",
        "postcss-sort-media-queries",
        "prettier-eslint",
        "putout",
        "react-chartjs-2",
        "react-refresh",
        "remark-github",
        "remark-lint",
        "remark-lint-emphasis-marker",
        "remark-lint-file-extension",
        "remark-lint-list-item-spacing",
        "remark-lint-maximum-heading-length",
        "remark-lint-maximum-line-length",
        "remark-lint-no-dead-urls",
        "remark-lint-no-file-name-irregular-characters",
        "remark-lint-no-file-name-mixed-case",
        "remark-lint-no-heading-punctuation",
        "remark-lint-no-literal-urls",
        "remark-lint-no-undefined-references",
        "remark-lint-ordered-list-marker-value",
        "remark-mdx",
        "secretlint",
        "stylelint-actions-formatters",
        "stylelint-checkstyle-formatter",
        "stylelint-codeframe-formatter",
        "stylelint-config-alphabetical-order",
        "stylelint-config-recommended",
        "stylelint-config-sass-guidelines",
        "stylelint-formatter-gitlab-code-quality-report",
        "stylelint-formatter-pretty",
        "stylelint-no-indistinguishable-colors",
        "stylelint-react-native",
        "tailwind-csstree",
        "tailwind-scrollbar-hide",
        "tidy-markdown",
        "ts-morph",
        "ts-morph-helpers",
        "ts-node",
        "tw-animate-css",
        "typedoc-plugin-coverage",
        "typedoc-plugin-dt-links",
        "typedoc-plugin-external-package-links",
        "typedoc-plugin-markdown",
        "typedoc-plugin-mdn-links",
        "typedoc-plugin-missing-exports",
        "typedoc-plugin-remark",
        "typedoc-plugin-rename-defaults",
        "typedoc-plugin-replace-text",
        "typedoc-plugin-zod",
        "typescript-eslint",
        "typescript-eslint-language-service",
        "typestat",
        "utf-8-validate",
        "unified",
        "vite-bundle-visualizer",
        "vite-plugin-checker",
        "vite-plugin-istanbul",
        "vite-plugin-mcp",
        "vitest-environment-browser",
        "vitest-sonar-reporter",
        "ws",
        "zod-fast-check",
    ],
    ignoreExportsUsedInFile: {
        interface: true,
        type: true,
    },
    includeEntryExports: true,
    project: [
        "!**/*.d.ts",
        "!**/coverage/**",
        "!**/dist/**",
        "!**/node_modules/**",
        "electron/**/*.{js,ts,tsx,jsx,mts,cjs,cts,mjs}",
        "shared/**/*.{js,ts,tsx,jsx,mts,cjs,cts,mjs}",
        "src/**/*.{js,ts,tsx,jsx,mts,cjs,cts,mjs}",
    ],
    rules: {
        binaries: "error",
        classMembers: "warn",
        dependencies: "error",
        devDependencies: "error",
        duplicates: "error",
        enumMembers: "warn",
        exports: "warn",
        files: "error",
        nsExports: "warn",
        nsTypes: "warn",
        optionalPeerDependencies: "error",
        types: "warn",
        unlisted: "error",
        unresolved: "error",
    },
    workspaces: {
        ".": {
            entry: [],
            project: [],
        },
        electron: {
            entry: ["electron/main.ts", "electron/preload.ts"],
            project: [
                "!electron/**/*.spec.ts",
                "!electron/**/*.test.ts",
                "electron/**/*.{js,ts}",
            ],
        },
        shared: {
            entry: ["shared/index.ts"],
            project: [
                "!shared/**/*.spec.ts",
                "!shared/**/*.test.ts",
                "shared/**/*.{js,ts}",
            ],
        },
        src: {
            entry: ["src/main.tsx"],
            project: [
                "!src/**/*.spec.ts",
                "!src/**/*.test.ts",
                "src/**/*.{js,ts,tsx,jsx}",
            ],
        },
    },
};

export default knipConfig;
